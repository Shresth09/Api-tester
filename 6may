import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.web.client.RestTemplateBuilder;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.util.UriComponentsBuilder;

@Service
public class JiraService {

    private final RestTemplate restTemplate;

    @Value("${jira.base-url}")
    private String jiraBaseUrl;

    @Value("${jira.username}")
    private String jiraUsername;

    @Value("${jira.password}")
    private String jiraPassword;

    public JiraService(RestTemplateBuilder restTemplateBuilder) {
        this.restTemplate = restTemplateBuilder.build();
    }

    public String searchJiraIssuesByPlanviewId(String planviewId) {
        String jql = "\"Planview ID\" ~ '" + planviewId + "' and issuetype = Planview";
        String uri = UriComponentsBuilder.fromHttpUrl(jiraBaseUrl)
                .path("/rest/api/latest/search")
                .queryParam("jql", jql)
                .build()
                .toUriString();

        HttpHeaders headers = new HttpHeaders();
        // Basic Authentication
        String auth = jiraUsername + ":" + jiraPassword;
        byte[] encodedAuth = java.util.Base64.getEncoder().encode(auth.getBytes());
        headers.set("Authorization", "Basic " + new String(encodedAuth));
        headers.set("Content-Type", "application/json");

        HttpEntity<String> requestEntity = new HttpEntity<>(headers);

        try {
            ResponseEntity<String> responseEntity = restTemplate.exchange(
                    uri,
                    HttpMethod.GET,
                    requestEntity,
                    String.class // Or a custom class to map the JSON response
            );
            return responseEntity.getBody();
        } catch (Exception e) {
            // Handle exceptions appropriately (logging, custom exception)
            e.printStackTrace();
            return null;
        }
    }
}
 





_-_--_-_-_-_-_-(_(_(_-_-_(_(_(







import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import org.springframework.web.client.RestTemplate;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;

public class JiraService {

    public String callJiraApi(String planviewId) {
        String jiraBaseUrl = "https://your-jira-instance/rest/api/latest/search";

        try {
            // Construct JQL Query with Encoding
            String jqlQuery = URLEncoder.encode("\"Planview ID\" ~ " + planviewId + " AND issuetype = Planview", StandardCharsets.UTF_8);
            String urlToSend = jiraBaseUrl + "?jql=" + jqlQuery + "&expand=names";

            // Setup Headers
            HttpHeaders headers = new HttpHeaders();
            headers.setBasicAuth("your-username", "your-api-token");
            headers.set("Accept", "application/json");

            // Create Request Entity
            HttpEntity<String> entity = new HttpEntity<>(headers);

            // Make API Call
            RestTemplate restTemplate = new RestTemplate();
            ResponseEntity<String> response = restTemplate.exchange(urlToSend, HttpMethod.GET, entity, String.class);

            return response.getBody();

        } catch (Exception e) {
            e.printStackTrace();
            return "Error in calling Jira API";
        }
    }
}