import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.*;
import org.springframework.web.client.RestTemplate;
import org.springframework.http.*;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

public class JiraService {

    private static final String JIRA_BASE_URL = "https://your-jira-instance/rest/api/latest/search";
    private static final String USERNAME = "your-username";
    private static final String API_TOKEN = "your-api-token";

    public String getJiraIssues(String planviewId) {
        try {
            // Construct and encode JQL query
            String jqlQuery = URLEncoder.encode("\"Planview ID\" ~ \"" + planviewId + "\" AND issuetype = \"Planview\"", StandardCharsets.UTF_8);
            String urlToSend = JIRA_BASE_URL + "?jql=" + jqlQuery + "&expand=names";

            // Setup headers
            HttpHeaders headers = new HttpHeaders();
            headers.setBasicAuth(USERNAME, API_TOKEN);
            headers.set("Accept", "application/json");

            // Make API call
            RestTemplate restTemplate = new RestTemplate();
            ResponseEntity<String> response = restTemplate.exchange(urlToSend, HttpMethod.GET, new HttpEntity<>(headers), String.class);

            return processJiraResponse(response.getBody());
        } catch (Exception e) {
            e.printStackTrace();
            return "{\"error\": \"Failed to fetch data from Jira\"}";
        }
    }

    private String processJiraResponse(String jsonResponse) {
        List<Map<String, Object>> results = new ArrayList<>();

        try {
            ObjectMapper objectMapper = new ObjectMapper();
            JsonNode rootNode = objectMapper.readTree(jsonResponse);
            JsonNode issuesNode = rootNode.path("issues");

            if (issuesNode.isEmpty()) {
                Map<String, Object> errorMap = new HashMap<>();
                errorMap.put("responseStatus", "Fail");
                errorMap.put("errorSummary", "Planview ID not found in Jira");
                results.add(errorMap);
            } else {
                for (JsonNode issueNode : issuesNode) {
                    Map<String, Object> issueDetails = new HashMap<>();
                    issueDetails.put("scCode", issueNode.path("key").asText());
                    issueDetails.put("name", issueNode.path("fields").path("summary").asText());
                    issueDetails.put("sdlcType", issueNode.path("fields").path("customfield_XXXXX").asText()); // Replace XXXXX with actual custom field ID
                    results.add(issueDetails);
                }
            }

            return objectMapper.writeValueAsString(Collections.singletonMap("jiraResponse", results));
        } catch (Exception e) {
            e.printStackTrace();
            return "{\"error\": \"Failed to parse Jira response\"}";
        }
    }
}