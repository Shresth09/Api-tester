    private String getCustomFieldValueFromOption(JsonNode fields, String customFieldId) {
        if (fields != null && fields.has(customFieldId) && !fields.get(customFieldId).isNull()) {
            JsonNode optionNode = fields.get(customFieldId);
            if (optionNode.isObject() && optionNode.has("value")) {
                return optionNode.get("value").asText();
            }
        }
        return null;
    }

    private String getCustomFieldValueFromUser(JsonNode fields, String customFieldId) {
        if (fields != null && fields.has(customFieldId) && !fields.get(customFieldId).isNull()) {
            JsonNode userNode = fields.get(customFieldId);
            if (userNode.isObject() && userNode.has("displayName")) {
                return userNode.get("displayName").asText();
            }
        }
        return null;
    }





import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.util.UriComponentsBuilder;

import java.io.IOException;
import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.Stream;

@Service
public class JiraService {

    private final RestTemplate restTemplate;
    private final ObjectMapper objectMapper;

    @Value("${jira.base.url}")
    private String jiraBaseUrl;

    @Value("${jira.api.token}")
    private String jiraToken;

    private String projectTypeCf;
    private String technicalManagerCf;
    private String projectProgramManagerCf;
    private String impactedApplicationsCf;
    private String sdlcPhaseCf;
    private String workStatusCf;
    private String workTypeCf;
    private String releaseDateCf;
    private String tisoCf;
    private String lobCf;

    public JiraService(RestTemplate restTemplate, ObjectMapper objectMapper) {
        this.restTemplate = restTemplate;
        this.objectMapper = objectMapper;
    }

    public ResponseEntity<ObjectNode> jiraRRPData(String body) {
        try {
            JsonNode rootNode = objectMapper.readTree(body);
            JsonNode planViewIdNode = rootNode.path("rrpInput").get(0).path("planviewID");
            String planviewID = planViewIdNode.asText();
            System.out.println("Planview ID: " + planviewID);

            HttpHeaders headers = new HttpHeaders();
            headers.set("Authorization", "Bearer " + jiraToken);
            headers.set("Accept", MediaType.APPLICATION_JSON_VALUE);
            HttpEntity<String> entity = new HttpEntity<>(headers);

            String jql = String.format("\"Planview ID\"='%s' and issuetype = 'Planview'", planviewID);

            String urlToSend = UriComponentsBuilder.fromHttpUrl(jiraBaseUrl)
                    .path("/rest/api/latest/search")
                    .queryParam("jql", jql)
                    .queryParam("expand", "names")
                    .build()
                    .toUriString();

            ResponseEntity<JsonNode> response = restTemplate.exchange(urlToSend, HttpMethod.GET, entity, JsonNode.class);

            return processJiraResponse(response.getBody(), planviewID);

        } catch (IOException e) {
            System.error.println("Error processing JSON: " + e.getMessage());
            ObjectNode errorResponse = objectMapper.createObjectNode();
            errorResponse.put("responseStatus", "Fail");
            errorResponse.put("errorSummary", "Error processing input JSON");
            return new ResponseEntity<>(errorResponse, HttpStatus.BAD_REQUEST);
        } catch (Exception e) {
            System.error.println("Error communicating with Jira: " + e.getMessage());
            ObjectNode errorResponse = objectMapper.createObjectNode();
            errorResponse.put("responseStatus", "Fail");
            errorResponse.put("errorSummary", "Error communicating with Jira");
            return new ResponseEntity<>(errorResponse, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    private ResponseEntity<ObjectNode> processJiraResponse(JsonNode jiraResponse, String planviewID) {
        List<Object> success = new ArrayList<>();
        List<Object> errors = new ArrayList<>();
        ArrayNode issues = (jiraResponse != null && jiraResponse.has("issues")) ? (ArrayNode) jiraResponse.get("issues") : objectMapper.createArrayNode();
        JsonNode names = jiraResponse != null && jiraResponse.has("names") ? jiraResponse.get("names") : objectMapper.createObjectNode();

        // Initialize custom field IDs based on the 'names' section of the response
        projectTypeCf = findCustomFieldIdByName(names, "Project Type");
        technicalManagerCf = findCustomFieldIdByName(names, "Technical Manager");
        projectProgramManagerCf = findCustomFieldIdByName(names, "Project / Program Manager");
        impactedApplicationsCf = findCustomFieldIdByName(names, "Impacted Applications");
        sdlcPhaseCf = findCustomFieldIdByName(names, "Planview SDLC Phase");
        workStatusCf = findCustomFieldIdByName(names, "Work Status");
        workTypeCf = findCustomFieldIdByName(names, "Work Type");
        releaseDateCf = findCustomFieldIdByName(names, "Planview release date");
        tisoCf = findCustomFieldIdByName(names, "TISO");
        lobCf = findCustomFieldIdByName(names, "LOB");

        if (issues.size() > 0) {
            for (JsonNode issueNode : issues) {
                String issueKey = issueNode.get("key").asText();
                JsonNode fields = issueNode.get("fields");

                List<String> mandatoryMissing = new ArrayList<>();
                int missingCount = 0;

                String projectType = getCustomFieldValueAsString(fields, projectTypeCf);
                String technicalManager = getCustomFieldValueAsString(fields, technicalManagerCf);
                String projectProgramManager = getCustomFieldValueAsString(fields, projectProgramManagerCf);
                String impactedApplications = getCustomFieldValueAsString(fields, impactedApplicationsCf);
                String sdlcPhase = getCustomFieldValueAsString(fields, sdlcPhaseCf);
                String workStatus = getCustomFieldValueAsString(fields, workStatusCf);
                String workType = getCustomFieldValueAsString(fields, workTypeCf);
                String releaseDate = getCustomFieldValueAsString(fields, releaseDateCf);
                String tiso = getCustomFieldValueAsString(fields, tisoCf);
                String lob = getCustomFieldValueAsString(fields, lobCf);
                String description = fields.has("description") && !fields.get("description").isNull() ? fields.get("description").asText() : null;
                String projectName = fields.has("summary") ? fields.get("summary").asText() : null;

                String processedProjectType = projectType;
                List<String> efResponders = new ArrayList<>();

                if ("Agile Major".equals(projectType) || "Agile Multi Release".equals(projectType)) {
                    processedProjectType = "Agile";
                    if (projectProgramManager == null) {
                        mandatoryMissing.add("Project / Program Manager");
                        missingCount++;
                    } else if (projectProgramManager.contains("(")) {
                        efResponders.add(projectProgramManager.substring(0, projectProgramManager.indexOf("(")).trim());
                    } else if (!projectProgramManager.isEmpty()) {
                        efResponders.add(projectProgramManager.trim());
                    }
                } else if ("Maintenance".equals(projectType)) {
                    if (technicalManager == null) {
                        mandatoryMissing.add("Technical Manager");
                        missingCount++;
                    } else if (technicalManager.contains("(")) {
                        efResponders.add(technicalManager.substring(0, technicalManager.indexOf("(")).trim());
                    } else if (!technicalManager.isEmpty()) {
                        efResponders.add(technicalManager.trim());
                    }
                } else if ("Waterfall".equals(projectType)) {
                    if (projectProgramManager == null) {
                        mandatoryMissing.add("Project / Program Manager");
                        missingCount++;
                    } else if (projectProgramManager.contains("(")) {
                        efResponders.add(projectProgramManager.substring(0, projectProgramManager.indexOf("(")).trim());
                    } else if (!projectProgramManager.isEmpty()) {
                        efResponders.add(projectProgramManager.trim());
                    }
                }

                List<String> csiIds = new ArrayList<>();
                if (impactedApplications != null) {
                    csiIds.addAll(Stream.of(impactedApplications.split(";"))
                            .map(String::trim)
                            .filter(s -> !s.isEmpty())
                            .map(s -> s.split(" ")[0])
                            .collect(Collectors.toList()));
                } else {
                    mandatoryMissing.add("CSI ID");
                    missingCount++;
                }

                String trimmedTiso = null;
                if (tiso != null && tiso.contains("(")) {
                    trimmedTiso = tiso.substring(0, tiso.indexOf("(")).trim();
                } else if (tiso != null) {
                    trimmedTiso = tiso.trim();
                }

                String trimmedDescription = null;
                if (description != null) {
                    trimmedDescription = description.length() > 1000 ? description.substring(0, 1000) : description;
                }

                if (missingCount > 0) {
                    ObjectNode error = objectMapper.createObjectNode();
                    error.put("projectId", planviewID);
                    error.put("responseStatus", "Fail");
                    error.put("errorSummary", String.join(", ", mandatoryMissing));
                    errors.add(error);
                } else {
                    ObjectNode successResponse = objectMapper.createObjectNode();
                    successResponse.put("sdlcType", processedProjectType);
                    successResponse.put("projectId", planviewID);
                    successResponse.put("name", projectName);
                    successResponse.put("description", trimmedDescription);
                    successResponse.put("type", workType);
                    successResponse.put("sdlcPhase", sdlcPhase);
                    successResponse.put("pmoProjectStatus", workStatus);
                    successResponse.put("releaseDate", releaseDate);

                    ObjectNode tisoNode = objectMapper.createObjectNode();
                    if (trimmedTiso != null) {
                        tisoNode.put("soeId", trimmedTiso);
                    }
                    successResponse.set("tiso", tisoNode);
                    successResponse.put("lob", lob);
                    successResponse.put("scCode", issueKey);
                    successResponse.put("lob", lob);

                    ArrayNode efResponderList = objectMapper.createArrayNode();
                    efResponders.forEach(ef -> {
                        ObjectNode responder = objectMapper.createObjectNode();
                        responder.put("soeId", ef);
                        efResponderList.add(responder);
                    });
                    successResponse.set("efResponderList", efResponderList);

                    ArrayNode csiIdList = objectMapper.createArrayNode();
                    csiIds.forEach(csi -> {
                        ObjectNode csiNode = objectMapper.createObjectNode();
                        csiNode.put("csiId", csi);
                        csiIdList.add(csiNode);
                    });
                    successResponse.set("csiIdList", csiIdList);

                    successResponse.put("responseStatus", "Success");
                    successResponse.put("instance", "GCT-NAM");
                    success.add(successResponse);
                }
            }
        } else {
            ObjectNode error = objectMapper.createObjectNode();
            error.put("projectId", planviewID);
            error.put("responseStatus", "Fail");
            error.put("errorSummary", "Planview Id not found in Jira");
            errors.add(error);
        }

        List<Object> total = new ArrayList<>();
        total.addAll(success);
        total.addAll(errors);

        ObjectNode finalResponse = objectMapper.createObjectNode();
        ArrayNode jiraResponseArray = objectMapper.createArrayNode();
        total.forEach(item -> jiraResponseArray.add(objectMapper.valueToTree(item)));
        finalResponse.set("jiraResponse", jiraResponseArray);

        return new ResponseEntity<>(finalResponse, HttpStatus.OK);
    }

    private String getCustomFieldValueAsString(JsonNode fields, String customFieldId) {
        if (fields != null && fields.has(customFieldId) && !fields.get(customFieldId).isNull()) {
            return fields.get(customFieldId).asText();
        }
        return null;
    }

    private String findCustomFieldIdByName(JsonNode namesNode, String fieldName) {
        Iterator<Map.Entry<String, JsonNode>> fields = namesNode.fields();
        while (fields.hasNext()) {
            Map.Entry<String, JsonNode> field = fields.next();
            if (field.getValue().asText().equals(fieldName)) {
                return field.getKey();
            }
        }
        System.error.println("Custom field name not found in 'names' section: " + fieldName);
        return null;
    }
}
