Let's dig deeper into this 500 Internal Server Error by simplifying our approach to identify the root cause.

### Step-by-Step Approach:

1. **Check Server Logs:**
   - Review the Jira server logs (`atlassian-jira.log`) for detailed error messages related to the servlet's POST request. This will give us a clearer idea of what's causing the error.

2. **Simplify Servlet Code for Testing:**
   - Ensure the servlet is correctly handling POST requests.

### Simplified Servlet Code:
Let's simplify the servlet to focus on handling the POST request correctly.

```java
package com.example.plugins.tutorial.servlet;

import com.atlassian.sal.api.pluginsettings.PluginSettings;
import com.atlassian.sal.api.pluginsettings.PluginSettingsFactory;
import com.atlassian.templaterenderer.TemplateRenderer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

public class IssueCRUD extends HttpServlet {

    private static final Logger log = LoggerFactory.getLogger(IssueCRUD.class);
    private final TemplateRenderer templateRenderer;
    private final PluginSettingsFactory pluginSettingsFactory;
    private static final String PLUGIN_STORAGE_KEY = "com.example.plugins.tutorial.servlet.IssueCRUD";
    private static final String DEFAULT_API_URL = "http://default-api-url.com"; // Default URL

    public IssueCRUD(TemplateRenderer templateRenderer, PluginSettingsFactory pluginSettingsFactory) {
        this.templateRenderer = templateRenderer;
        this.pluginSettingsFactory = pluginSettingsFactory;
    }

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        // Add CORS headers
        resp.setHeader("Access-Control-Allow-Origin", "*"); // Allow all origins
        resp.setHeader("Access-Control-Allow-Methods", "GET, POST, OPTIONS"); // Allow GET, POST, and OPTIONS methods
        resp.setHeader("Access-Control-Allow-Headers", "Content-Type"); // Allow Content-Type header

        String action = req.getParameter("action");
        if ("getUrl".equals(action)) {
            PluginSettings pluginSettings = pluginSettingsFactory.createGlobalSettings();
            String apiUrl = (String) pluginSettings.get(PLUGIN_STORAGE_KEY + ".apiUrl");
            if (apiUrl == null) {
                apiUrl = DEFAULT_API_URL; // Use default URL if not set
            }
            resp.setContentType("application/json");
            resp.getWriter().write("{\"apiUrl\": \"" + apiUrl + "\"}");
        } else {
            resp.setContentType("text/html;charset=utf-8");
            templateRenderer.render("templates/issuecrud-page.vm", resp.getWriter());
        }
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        // Add CORS headers
        resp.setHeader("Access-Control-Allow-Origin", "*"); // Allow all origins
        resp.setHeader("Access-Control-Allow-Methods", "GET, POST, OPTIONS"); // Allow GET, POST, and OPTIONS methods
        resp.setHeader("Access-Control-Allow-Headers", "Content-Type"); // Allow Content-Type header

        try {
            String action = req.getParameter("action");
            if ("saveUrl".equals(action)) {
                String apiUrl = req.getParameter("url");
                PluginSettings pluginSettings = pluginSettingsFactory.createGlobalSettings();
                pluginSettings.put(PLUGIN_STORAGE_KEY + ".apiUrl", apiUrl);
                resp.getWriter().write("URL saved successfully!");
            } else {
                resp.setStatus(HttpServletResponse.SC_BAD_REQUEST);
                resp.getWriter().write("Invalid action!");
            }
        } catch (Exception e) {
            log.error("Error processing POST request", e);
            resp.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
            resp.getWriter().write("Error processing request!");
        }
    }

    @Override
    protected void doOptions(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        // Add CORS headers for OPTIONS requests
        resp.setHeader("Access-Control-Allow-Origin", "*"); // Allow all origins
        resp.setHeader("Access-Control-Allow-Methods", "GET, POST, OPTIONS"); // Allow GET, POST, and OPTIONS methods
        resp.setHeader("Access-Control-Allow-Headers", "Content-Type"); // Allow Content-Type header
    }
}
```

### Simplified HTML and JavaScript Code:
Let's keep the HTML and JavaScript code simple to just update and fetch the URL.

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Fetch and Update URL</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
    <div class="container">
        <h2>Fetch and Update URL</h2>
        <button onclick="fetchUrl()">Fetch URL</button>
        <div class="response-group">
            <h3>Response</h3>
            <div class="response-body">
                <strong>Current URL:</strong>
                <pre id="currentUrl">Loading...</pre>
            </div>
        </div>
        
        <!-- Input to update the URL -->
        <div class="update-group">
            <input type="text" id="newUrl" placeholder="Enter new API URL">
            <button onclick="updateUrl()">Update URL</button>
        </div>
    </div>

    <script>
        function fetchUrl() {
            const apiUrl = `${window.location.origin}/jira/plugins/servlet/issuecrud?action=getUrl`;

            fetch(apiUrl, {
                method: 'GET',
                headers: {
                    'Referer': window.location.href,
                    'Content-Type': 'application/json'
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                document.getElementById('currentUrl').textContent = `Current URL: ${data.apiUrl}`;
            })
            .catch(error => {
                document.getElementById('currentUrl').textContent = `Error: ${error}`;
            });
        }

        function updateUrl() {
            const newUrl = document.getElementById('newUrl').value;
            const apiUrl = `${window.location.origin}/jira/plugins/servlet/issuecrud`;

            fetch(apiUrl, {
                method: 'POST',
                headers: {
                    'Referer': window.location.href,
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                body: `action=saveUrl&url=${encodeURIComponent(newUrl)}`
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                return response.text();
            })
            .then(data => {
                fetchUrl(); // Refresh the displayed URL after updating
                alert('URL updated successfully!');
            })
            .catch(error => {
                alert(`Error: ${error}`);
            });
        }

        // Automatically fetch the URL when the page loads
        document.addEventListener("DOMContentLoaded", fetchUrl);
    </script>
</body>
</html>
```

### Explanation:

1. **Simplified Servlet:**
   - Added error handling to catch and log exceptions, returning a 500 status code if an error occurs.
   - Returns a 400 status code for invalid actions.

2. **HTML and JavaScript:**
   - Fetches the current URL and displays it.
   - Updates the URL using a POST request with `action=saveUrl`.
   - Error handling to catch and display errors.

### Next Steps:

1. **Deploy the updated servlet and HTML page.**
2. **Check the Jira server logs for any detailed error messages if the 500 error persists.**

By following these steps, we can better understand and resolve the 500 Internal Server Error. Let me know how it goes and if you see any specific error messages in the server logs![43dcd9a7-70db-4a1f-b0ae-981daa162054](https://github.com/narniness/code/tree/3140ff84812e7d71be214013df4b3a944ca19ea1/PagerDutyIntegration%2Fsrc%2Fmain%2Fjava%2Fcom%2Fdt%2Fjira%2Fpagerduty%2Fintgt%2Fplugin%2Fservlet%2FPagerDutyServiceServlet.java?citationMarker=43dcd9a7-70db-4a1f-b0ae-981daa162054 "1")[43dcd9a7-70db-4a1f-b0ae-981daa162054](https://github.com/Polygor/web-store/tree/cc685d5cb05022fa23d81adbadecdd2623b5a3b0/src%2Fmain%2Fjava%2Fcom%2Fepam%2Fpolygor%2Fwebstore%2Fservlet%2FErrorHandler.java?citationMarker=43dcd9a7-70db-4a1f-b0ae-981daa162054 "2")[43dcd9a7-70db-4a1f-b0ae-981daa162054](https://github.com/masudio/masudio.com/tree/5efa964b920bc18639d835a4ade5e07ae352925f/src%2Fmain%2Fjava%2Fmasudio%2Fapp%2Ffirst%2FHelloServlet.java?citationMarker=43dcd9a7-70db-4a1f-b0ae-981daa162054 "3")[43dcd9a7-70db-4a1f-b0ae-981daa162054](https://github.com/EleanorEllingson/web-dev/tree/b2f2a382e77a20fd6895677c8b8f402ac4bae352/7-bank-project%2F1-template-route%2Ftranslations%2FREADME.ko.md?citationMarker=43dcd9a7-70db-4a1f-b0ae-981daa162054 "4")