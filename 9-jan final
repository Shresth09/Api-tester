Got it! Let's update the HTML and JavaScript to achieve an expandable list with checkboxes and a search bar. We'll also make sure to store the selected projects and maintain them across page reloads.

### Updated `issuecrud-page.vm` (HTML)
```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ROM URL Config</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            padding: 20px;
            background-color: #f4f4f4;
        }
        .container {
            max-width: 100%;
            margin: 0 auto;
            padding: 20px;
            background-color: #fff;
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }
        .aui-page-header-main {
            padding-bottom: 1px;
            border-bottom: 1px solid #ddd;
            color: #292959;
            font-family: Georgia, serif;
        }
        .text.medium-long-field, .search-field {
            width: 100%;
            padding: 8px;
            box-sizing: border-box;
            border: 1px solid #ccc;
            border-radius: 4px;
            margin-bottom: 15px;
        }
        .aui-button.aui-button-primary {
            background-color: #0052cc;
            color: #fff;
            padding: 10px 15px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
        .aui-button.aui-button-primary:hover {
            background-color: #003d99;
        }
        .url-link {
            color: #0052cc;
            text-decoration: underline;
            cursor: pointer;
        }
        .current {
            font-family: Georgia, serif;
            color: gray;
        }
        .project-list {
            max-height: 200px;
            overflow-y: auto;
            border: 1px solid #ccc;
            border-radius: 4px;
            padding: 10px;
            display: none;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="aui-page-header-main">
            <h2>AI-ROM URL Configuration</h2>
        </div>
        <div>
            <h4 class="current">Current URL:</h4>
            <pre id="currentUrl" class="url-link">Loading...</pre>
        </div>
        <div class="update-group">
            <input type="text" id="newUrl" class="text medium-long-field" placeholder="Enter new API URL">
            <button onclick="updateUrl()" class="aui-button aui-button-primary">Update URL</button>
        </div>
        <div>
            <h4>Select Project:</h4>
            <input type="text" id="projectSearch" class="search-field" placeholder="Search projects...">
            <div id="projectList" class="project-list">
                <!-- Checkboxes will be populated dynamically -->
            </div>
            <button onclick="applySelection()" class="aui-button aui-button-primary">Apply</button>
        </div>
    </div>

    <script>
        function fetchUrl() {
            const apiurl = window.location.origin + "/jira/plugins/servlet/issuecrud?action=getUrl";
            fetch(apiurl, {
                method: 'GET',
                headers: {
                    'Referer': window.location.href,
                    'Content-Type': 'application/json'
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                document.getElementById('currentUrl').textContent = data.apiurl;
                document.getElementById('currentUrl').className = "url-link";
                document.getElementById('newUrl').value = data.apiurl;
            })
            .catch(error => {
                document.getElementById('currentUrl').textContent = `Error: ${error}`;
                document.getElementById('currentUrl').className = "";
            });
        }

        function updateUrl() {
            const newUrl = document.getElementById('newUrl').value;
            const apiurl = window.location.origin + "/jira/plugins/servlet/issuecrud?action=updateUrl&url=" + newUrl;
            console.log("Updating URL:", newUrl);
            console.log("Request URL:", apiurl);
            fetch(apiurl, {
                method: 'GET',
                headers: {
                    'Referer': window.location.href
                }
            })
            .then(response => {
                console.log("Response status:", response.status);
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                return response.text();
            })
            .then(data => {
                console.log("Response data:", data);
                document.getElementById('currentUrl').textContent = newUrl;
                document.getElementById('currentUrl').className = "url-link";
                document.getElementById('newUrl').value = newUrl;
                alert('URL updated successfully!');
            })
            .catch(error => {
                console.log("Error occurred:", error);
                document.getElementById('currentUrl').textContent = `Error: ${error}`;
                document.getElementById('currentUrl').className = "";
                alert(`Error: ${error}`);
            });
        }

        function fetchProjects() {
            const apiurl = window.location.origin + "/jira/plugins/servlet/issuecrud?action=getProjects";
            fetch(apiurl, {
                method: 'GET',
                headers: {
                    'Referer': window.location.href,
                    'Content-Type': 'application/json'
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                const projectList = document.getElementById('projectList');
                data.projects.forEach(project => {
                    const label = document.createElement('label');
                    label.innerHTML = `<input type="checkbox" value="${project.key}"> ${project.key} - ${project.name}`;
                    projectList.appendChild(label);
                    projectList.appendChild(document.createElement('br'));
                });
                projectList.style.display = "block";
            })
            .catch(error => {
                console.log("Error occurred:", error);
            });
        }

        function fetchSelectedProjects() {
            const apiurl = window.location.origin + "/jira/plugins/servlet/issuecrud?action=getSelectedProjects";
            fetch(apiurl, {
                method: 'GET',
                headers: {
                    'Referer': window.location.href,
                    'Content-Type': 'application/json'
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                const projectList = document.getElementById('projectList');
                data.selectedProjects.forEach(selectedKey => {
                    const checkbox = projectList.querySelector(`input[value="${selectedKey}"]`);
                    if (checkbox) {
                        checkbox.checked = true;
                    }
                });
            })
            .catch(error => {
                console.log("Error occurred:", error);
            });
        }

        function applySelection() {
            const projectList = document.getElementById('projectList');
            const selectedKeys = Array.from(projectList.querySelectorAll('input[type="checkbox"]:checked')).map(checkbox => checkbox.value);
            const apiurl = window.location.origin + "/jira/plugins/servlet/issuecrud?action=applySelection&keys=" + selectedKeys.join(",");
            console.log("Applying selection:", selectedKeys);
            fetch(apiurl, {
                method: 'GET',
                headers: {
                    'Referer': window.location.href
                }
            })
            .then(response => {
                console.log("Response status:", response.status);
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                return response.text();
            })
            .then(data => {
                alert('Projects applied successfully!');
            })
            .catch(error => {
                console.log("Error occurred:", error);
                alert(`Error: ${error}`);
            });
        }

        document.getElementById('projectSearch').addEventListener('input', function() {
            const filter = this.value.toLowerCase();
            const projectList = document.getElementById('projectList');
            const labels = projectList.getElementsByTagName('label');
            Array.from(labels).forEach(label => {
                if (label.textContent.toLowerCase().includes(filter)) {
                    label.style.display = "";
                } else {
                    label.style.display = "none";
                }
            });
        });

        document.addEventListener("DOMContentLoaded", fetchUrl);
        document.addEventListener("DOMContentLoaded", fetchProjects);
        document.addEventListener("DOMContentLoaded", fetchSelectedProjects);
    </script>
</body>
</html>
```

### Updated `IssueCRUD.java` (Servlet)
```java
package com.example.plugins.tutorial.servlet;

import com.atlassian.sal.api.pluginsettings.PluginSettings;
import com.atlassian.sal.api.pluginsettings.PluginSettingsFactory;
import com.atlassian.templaterenderer[43dcd9a7-70db-4a1f-b0ae-981daa162054](https://github.com/hubhack/hubhack.github.io/tree/3613c687a446afea34500da8889a75da3fbd77c3/source%2F_posts%2Fjs%2FHTML.md?citationMarker=43dcd9a7-70db-4a1f-b0ae-981daa162054 "1")








Absolutely! Let's write the complete servlet code again, incorporating the new functionality to manage the selected projects.

### Complete `IssueCRUD.java` (Servlet)
```java
package com.example.plugins.tutorial.servlet;

import com.atlassian.sal.api.pluginsettings.PluginSettings;
import com.atlassian.sal.api.pluginsettings.PluginSettingsFactory;
import com.atlassian.templaterenderer.TemplateRenderer;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.user.ApplicationUser;
import com.atlassian.jira.security.groups.GroupManager;
import com.atlassian.jira.project.Project;
import com.atlassian.jira.project.ProjectManager;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.ServletException;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import com.google.gson.Gson;
import com.google.gson.JsonObject;

public class IssueCRUD extends HttpServlet {
    private static final Logger Log = LoggerFactory.getLogger(IssueCRUD.class);

    private final TemplateRenderer templateRenderer;
    private final PluginSettingsFactory pluginSettingsFactory;
    private static final String PLUGIN_STORAGE_KEY = "com.example.plugins.tutorial.servlet.IssueCRUD";
    private static final String DEFAULT_API_URL = "default_URL";

    public IssueCRUD(TemplateRenderer templateRenderer, PluginSettingsFactory pluginSettingsFactory) {
        this.templateRenderer = templateRenderer;
        this.pluginSettingsFactory = pluginSettingsFactory;
    }

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        resp.setHeader("Access-Control-Allow-Origin", "*");
        resp.setHeader("Access-Control-Allow-Methods", "GET, POST, OPTIONS");
        resp.setHeader("Access-Control-Allow-Headers", "Content-Type");

        // Check if the user is an admin
        ApplicationUser user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser();
        GroupManager groupManager = ComponentAccessor.getGroupManager();
        if (user == null || !groupManager.isUserInGroup(user, "jira-administrators")) {
            resp.setStatus(HttpServletResponse.SC_FORBIDDEN);
            resp.getWriter().write("You do not have permission to access this page.");
            return;
        }

        String action = req.getParameter("action");

        // Fetch the current URL
        if ("getUrl".equals(action)) {
            PluginSettings pluginSettings = pluginSettingsFactory.createGlobalSettings();
            String apiurl = (String) pluginSettings.get(PLUGIN_STORAGE_KEY + ".apiUrl");
            if (apiurl == null) {
                apiurl = DEFAULT_API_URL;
            }
            resp.setContentType("application/json");
            resp.getWriter().write("{\"apiurl\":\"" + apiurl + "\"}");
        } 
        // Update the URL
        else if ("updateUrl".equals(action)) {
            try {
                String newUrl = req.getParameter("url");
                PluginSettings pluginSettings = pluginSettingsFactory.createGlobalSettings();
                pluginSettings.put(PLUGIN_STORAGE_KEY + ".apiUrl", newUrl);
                resp.setContentType("text/plain");
                resp.getWriter().write("URL updated successfully!");
            } catch (Exception e) {
                Log.error("Error processing update URL request", e);
                resp.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
                resp.getWriter().write("Error processing request!");
            }
        }
        // Handle apply selection action
        else if ("applySelection".equals(action)) {
            String[] projectKeys = req.getParameter("keys").split(",");
            // Store the selected project keys in PluginSettings
            PluginSettings pluginSettings = pluginSettingsFactory.createGlobalSettings();
            pluginSettings.put(PLUGIN_STORAGE_KEY + ".selectedProjects", String.join(",", projectKeys));
            resp.setContentType("text/plain");
            resp.getWriter().write("Projects applied successfully!");
        }
        // Fetch all projects
        else if ("getProjects".equals(action)) {
            ProjectManager projectManager = ComponentAccessor.getProjectManager();
            List<Project> projects = projectManager.getProjectObjects();
            List<JsonObject> projectList = projects.stream().map(project -> {
                JsonObject projectJson = new JsonObject();
                projectJson.addProperty("key", project.getKey());
                projectJson.addProperty("name", project.getName());
                return projectJson;
            }).collect(Collectors.toList());
            String jsonResponse = new Gson().toJson(projectList);
            resp.setContentType("application/json");
            resp.getWriter().write("{\"projects\":" + jsonResponse + "}");
        }
        // Fetch selected projects
        else if ("getSelectedProjects".equals(action)) {
            PluginSettings pluginSettings = pluginSettingsFactory.createGlobalSettings();
            String selectedProjects = (String) pluginSettings.get(PLUGIN_STORAGE_KEY + ".selectedProjects");
            if (selectedProjects == null) {
                selectedProjects = "";
            }
            String[] selectedKeys = selectedProjects.split(",");
            String jsonResponse = new Gson().toJson(Arrays.asList(selectedKeys));
            resp.setContentType("application/json");
            resp.getWriter().write("{\"selectedProjects\":" + jsonResponse + "}");
        } 
        // Default action
        else {
            resp.setContentType("text/html; charset=utf-8");
            templateRenderer.render("templates/issuecrud-page.vm", resp.getWriter());
        }
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        doGet(req, resp);
    }
}
```

This servlet code handles the following:
1. **Admin Check**: Ensures only Jira administrators can access the page.
2. **Fetch URL**: Retrieves the current API URL.
3. **Update URL**: Updates the API URL.
4. **Apply Selection**: Stores the selected project keys.
5. **Fetch Projects**: Retrieves all projects with their keys and names.
6. **Fetch Selected Projects**: Retrieves the selected project keys to maintain state across page reloads.

Let me know if there are any additional modifications or features you'd like to add![43dcd9a7-70db-4a1f-b0ae-981daa162054](https://github.com/ludopif/workshop-example/tree/b949c8b5080008d496a07c8d9dd55ce0bf6796b5/src%2Fmain%2Fjava%2Fcom%2Forange%2Ftodolist%2FTodosServlet.java?citationMarker=43dcd9a7-70db-4a1f-b0ae-981daa162054 "1")[43dcd9a7-70db-4a1f-b0ae-981daa162054](https://github.com/wutongservice/wutongservice/tree/81d66d3cc06d362a355582d38d691f341db565da/ServerPlatform%2Fbase%2Fsrc%2Fmain%2Fjava%2Fcom%2Fborqs%2Fserver%2Fbase%2Fweb%2Fwebmethod%2FWebMethodServlet.java?citationMarker=43dcd9a7-70db-4a1f-b0ae-981daa162054 "2")[43dcd9a7-70db-4a1f-b0ae-981daa162054](https://github.com/rodneylsp/java-json/tree/5ae7cc73d7563c1af4e1775d95ec83887c8b5b81/contatos%2Fsrc%2FContatosServlet.java?citationMarker=43dcd9a7-70db-4a1f-b0ae-981daa162054 "3")[43dcd9a7-70db-4a1f-b0ae-981daa162054](https://github.com/smoeller1/BuRMA/tree/279976b0f2b29aaf17adb3ce61cd6fe9a9449fc6/src%2FMongoRestApp%2Fsrc%2Fedu%2Fumkc%2Fmongorestapp%2FUserServlet.java?citationMarker=43dcd9a7-70db-4a1f-b0ae-981daa162054 "4")