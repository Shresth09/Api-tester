public ResponseEntity<ObjectNode> getIssueByKey(String query) {
    ObjectMapper mapper = new ObjectMapper();
    ObjectNode errorJson = mapper.createObjectNode();

    // Input validation or sanitization
    if (!isValidQuery(query)) {
        Logger.debug("Invalid query parameter: " + query);
        errorJson.put("error", "Invalid character in query: " + query + " INTERNAL_SERVER_ERROR");
        return new ResponseEntity<>(errorJson, HttpStatus.INTERNAL_SERVER_ERROR);
    }

    try {
        // Compile the regex pattern with sanitized input
        Pattern.compile(query);
    } catch (PatternSyntaxException e) {
        Logger.debug("Pattern syntax error: " + e.getMessage());
        errorJson.put("error", "Invalid regex pattern in query: " + query + " INTERNAL_SERVER_ERROR");
        return new ResponseEntity<>(errorJson, HttpStatus.INTERNAL_SERVER_ERROR);
    }

    // Normal processing logic can follow here
    // For example:
    ObjectNode successJson = mapper.createObjectNode();
    successJson.put("message", "Pattern compiled successfully!");
    return new ResponseEntity<>(successJson, HttpStatus.OK);
}

private boolean isValidQuery(String query) {
    // Implement validation logic
    // Example: Check for allowed characters in the query
    return query.matches("[a-zA-Z0-9]+"); // Modify the regex as per your requirements
}







@RestController
@RequestMapping("/jira")
public class JiraController {

    private final RestTemplate restTemplate;
    private final ObjectMapper objectMapper;

    @Value("${jira.base.url}")
    private String jiraBaseUrl;

    @Value("${jira.username}")
    private String jiraUsername;

    @Value("${jira.api.token}")
    private String jiraApiToken;

    public JiraController(RestTemplate restTemplate, ObjectMapper objectMapper) {
        this.restTemplate = restTemplate;
        this.objectMapper = objectMapper;
    }

    @GetMapping("/customFieldInfo")
    public ResponseEntity<ObjectNode> getCustomFieldInfo(@RequestParam String fieldName) {
        try {
            HttpHeaders headers = new HttpHeaders();
            headers.setBasicAuth(jiraUsername, jiraApiToken);
            headers.setContentType(MediaType.APPLICATION_JSON);

            HttpEntity<String> entity = new HttpEntity<>(headers);
            String url = jiraBaseUrl + "/rest/api/2/field";

            ResponseEntity<String> response = restTemplate.exchange(
                url, HttpMethod.GET, entity, String.class
            );

            ArrayNode fieldsArray = (ArrayNode) objectMapper.readTree(response.getBody());

            for (JsonNode field : fieldsArray) {
                if (fieldName.equals(field.get("name").asText())) {
                    // Build the success response
                    ObjectNode fieldInfo = objectMapper.createObjectNode();
                    fieldInfo.put("type", "success");
                    fieldInfo.put("title", "Custom Field Id");
                    fieldInfo.put("close", "auto");
                    fieldInfo.put("body", field.get("id").asText());

                    return ResponseEntity.ok(fieldInfo);
                }
            }

            // Build the error response
            ObjectNode errorNode = objectMapper.createObjectNode();
            errorNode.put("error", "Error Finding field " + fieldName);

            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(errorNode);

        } catch (Exception e) {
            ObjectNode errorNode = objectMapper.createObjectNode();
            errorNode.put("error", "Unexpected Error");
            errorNode.put("message", e.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(errorNode);
        }
    }
}