function selectAllProjects(source) {
    const checkboxes = document.querySelectorAll('input[type="checkbox"]');
    checkboxes.forEach(checkbox => {
        if (checkbox !== source) {
            checkbox.checked = source.checked;

            // Update selectedProjects based on the "Select All" checkbox
            if (source.checked) {
                if (!selectedProjects.includes(checkbox.value)) {
                    selectedProjects.push(checkbox.value);
                }
            } else {
                const index = selectedProjects.indexOf(checkbox.value);
                if (index > -1) {
                    selectedProjects.splice(index, 1);
                }
            }
        }
    });
}







Understood! Let's update your code to ensure that the list is always maintained independently of the search results. We will modify the `applySelection` function and add event listeners to checkboxes to handle adding and removing projects from `selectedProjects`.

1. Update the `applySelection` function:
```javascript
function applySelection() {
    const apiurl = window.location.origin + "/jira/plugins/servlet/issuecrud?action=applySelection&keys=" + selectedProjects.join(",");

    fetch(apiurl, {
        method: 'GET',
        headers: {
            "Referer": window.location.href
        }
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('HTTP error! Status: ' + response.status);
        }
        return response.text();
    })
    .then(data => {
        alert('Projects applied successfully!');
        loadPopupContent();
    })
    .catch(error => {
        console.log("Error Applying Selection: ", error);
        alert("Error: " + error);
    });
}
```

2. Add event listeners to checkboxes for maintaining `selectedProjects`:
```javascript
function updateProjectList(filteredProjects = []) {
    const projectList = document.getElementById('projectList');
    projectList.innerHTML = '';

    const projectsToDisplay = filteredProjects.length ? filteredProjects : allProjects;

    projectsToDisplay.forEach(project => {
        const label = document.createElement('label');
        const [key, name] = project.split("-");
        const checkbox = document.createElement('input');
        checkbox.type = "checkbox";
        checkbox.value = key;

        // Check if the project is selected
        if (selectedProjects.includes(key)) {
            checkbox.checked = true;
        }

        // Add event listener to handle checkbox changes
        checkbox.addEventListener('change', function() {
            if (this.checked) {
                if (!selectedProjects.includes(this.value)) {
                    selectedProjects.push(this.value);
                }
            } else {
                const index = selectedProjects.indexOf(this.value);
                if (index > -1) {
                    selectedProjects.splice(index, 1);
                }
            }
        });

        label.appendChild(checkbox);
        label.appendChild(document.createTextNode(key + " - " + name));
        projectList.appendChild(label);
        projectList.appendChild(document.createElement('br'));
    });
}
```

By adding these event listeners, we ensure that the `selectedProjects` list is always updated based on the user's checkbox interactions, independent of the search results. 

If you need any more tweaks or have questions, just let me know!




You're right, this could be an issue because `issuecrud-page.vm` is hosted independently through the servlet, while `popup.vm` is integrated as a web panel in JIRA. The key is to ensure that the context you set for the web panel is properly passed and rendered within JIRA.

### Solution:
We need to ensure that `allowedProjectKeys` is correctly passed and accessible when rendering `popup.vm` within the web panel context. To achieve this, you can utilize JIRA's context parameters and a context provider to set these variables.

#### Step-by-Step Solution:

1. **Create a Context Provider:**
   Create a custom context provider class to set the necessary context variables for `popup.vm`.

2. **Update `atlassian-plugin.xml`:**
   Register the context provider for the web panel.

### Step 1: Create a Custom Context Provider

Create a custom context provider class that sets `allowedProjectKeys` and other required variables.

```java
import com.atlassian.plugin.web.ContextProvider;
import com.atlassian.sal.api.pluginsettings.PluginSettings;
import com.atlassian.sal.api.pluginsettings.PluginSettingsFactory;

import javax.servlet.http.HttpServletRequest;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PopupContextProvider implements ContextProvider {
    private final PluginSettingsFactory pluginSettingsFactory;

    public PopupContextProvider(PluginSettingsFactory pluginSettingsFactory) {
        this.pluginSettingsFactory = pluginSettingsFactory;
    }

    @Override
    public void init(Map<String, String> params) {
        // Initialization if needed
    }

    @Override
    public Map<String, Object> getContextMap(Map<String, Object> context) {
        HttpServletRequest request = (HttpServletRequest) context.get("request");
        PluginSettings pluginSettings = pluginSettingsFactory.createGlobalSettings();
        String selectedProjects = (String) pluginSettings.get("com.example.plugins.tutorial.servlet.IssueCRUD.selectedProjects");

        List<String> allowedProjectKeys = new ArrayList<>();
        if (selectedProjects != null && !selectedProjects.isEmpty()) {
            allowedProjectKeys = Arrays.asList(selectedProjects.split(","));
        }

        context.put("allowedProjectKeys", allowedProjectKeys);
        context.put("projectKey", request.getParameter("projectKey")); // Pass projectKey if available

        return context;
    }
}
```

### Step 2: Update `atlassian-plugin.xml`

Register the context provider for the web panel to ensure the context is set correctly.

```xml
<atlassian-plugin key="your-plugin-key" name="Your Plugin Name" plugins-version="2">
    <!-- Web Panel Definition -->
    <web-panel key="popup-web-panel" location="atl.jira.view.issue.right.context" weight="100">
        <description>Popup Web Panel</description>
        <context-provider class="com.example.plugins.PopupContextProvider"/>
        <resource name="view" type="velocity" location="templates/popup.vm"/>
    </web-panel>

    <!-- Servlet Definition -->
    <servlet key="issuecrud-servlet" name="Issue CRUD Servlet" class="com.example.plugins.IssueCRUDServlet">
        <description>This servlet handles Issue CRUD operations.</description>
        <url-pattern>/plugins/servlet/issuecrud</url-pattern>
    </servlet>
</atlassian-plugin>
```

### Explanation:
1. **PopupContextProvider:**
   - Fetches `selectedProjects` and splits them into `allowedProjectKeys`.
   - Sets `allowedProjectKeys` and `projectKey` in the context map.

2. **atlassian-plugin.xml:**
   - Registers the context provider for the web panel, ensuring the context is available when rendering `popup.vm`.

### Example `popup.vm` Template:

Ensure that `popup.vm` uses the context variables set by the context provider.

```vm
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Popup</title>
</head>
<body>
    <span>Allowed Key From Popup VM File: $allowedProjectKeys</span></br>
    <span>Project Key: $projectKey</span></br>
    #if ($allowedProjectKeys.contains($projectKey))
        <a id="show-popup" class="aui-button">AI-RQM Analysis</a>
    #else
        <span>This project is not allowed.</span>
    #end
</body>
</html>
```

By creating a custom context provider and updating your plugin descriptor, you ensure that `allowedProjectKeys` and `projectKey` are correctly passed and accessible within `popup.vm` when it's rendered as a web panel in JIRA. Give this approach a try and let me know if it resolves your issue or if you need further assistance!