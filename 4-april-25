public ResponseEntity<ObjectNode> getIssueByKey(String query) {
    try {
        // Initialize headers
        HttpHeaders headers = new HttpHeaders();
        headers.set("Authorization", "Bearer " + jira_token);
        headers.set("Accept", MediaType.APPLICATION_JSON_VALUE);
        HttpEntity<String> entity = new HttpEntity<>(headers);

        // Initialize variables for pagination
        String urlToSend;
        int startAt = 0;
        int maxResults = 1000;
        int total = 0;

        // Create an ObjectMapper and a single ArrayNode to store all issues
        ObjectMapper mapper = new ObjectMapper();
        ArrayNode allIssuesArray = mapper.createArrayNode();

        // Pagination loop
        do {
            // Construct the API URL dynamically for pagination
            if (query == null || query.trim().isEmpty()) {
                urlToSend = jira_nam_base_url + "/rest/api/2/search?jql=issuetype=Application&startAt=" + startAt + "&maxResults=" + maxResults;
            } else {
                urlToSend = jira_nam_base_url + "/rest/api/2/search?jql=issuetype=Application AND summary~\"" + query + "\"&startAt=" + startAt + "&maxResults=" + maxResults;
            }

            System.out.println("Calling URL: " + urlToSend);

            // Make the API call
            ResponseEntity<String> response = restTemplate.exchange(urlToSend, HttpMethod.GET, entity, String.class);

            // Parse the API response
            JsonNode rootNode = mapper.readTree(response.getBody());
            ArrayNode issues = (ArrayNode) rootNode.get("issues");
            total = rootNode.get("total").asInt();

            // Append the fetched issues to the main ArrayNode
            allIssuesArray.addAll(issues);

            // Increment startAt for the next batch
            startAt += maxResults;

        } while (startAt < total); // Continue until all issues are fetched

        // Wrap the aggregated issues in the final JSON response
        ObjectNode finalResponse = mapper.createObjectNode();
        finalResponse.set("items", allIssuesArray);

        // Return the final response
        return new ResponseEntity<>(finalResponse, HttpStatus.OK);

    } catch (Exception ex) {
        ex.printStackTrace();

        // Handle errors and return meaningful error response
        ObjectMapper mapper = new ObjectMapper();
        ObjectNode errorResponse = mapper.createObjectNode();
        errorResponse.put("error", "Failed to fetch issues: " + ex.getMessage());
        logService.createLog("ERROR", "Exception caught: " + ex, "Event Manager");
        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(errorResponse);
    }
}