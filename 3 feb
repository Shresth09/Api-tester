import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.context.GlobalIssueContext;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.fields.CustomFieldManager;
import com.atlassian.jira.issue.fields.config.manager.FieldConfigSchemeManager;
import com.atlassian.jira.issue.fields.config.FieldConfigScheme;
import com.atlassian.jira.issue.fields.layout.field.FieldLayoutManager;
import com.atlassian.jira.issue.fields.layout.field.EditableFieldLayout;
import com.atlassian.jira.issue.fields.layout.field.FieldLayoutItem;
import com.atlassian.jira.issue.fields.screen.FieldScreen;
import com.atlassian.jira.issue.fields.screen.FieldScreenScheme;
import com.atlassian.jira.issue.fields.screen.FieldScreenSchemeManager;
import com.atlassian.jira.issue.fields.screen.FieldScreenSchemeItem;
import com.atlassian.jira.issue.fields.screen.FieldScreenTab;
import com.atlassian.jira.workflow.WorkflowManager;
import com.atlassian.jira.workflow.JiraWorkflow;
import com.opensymphony.workflow.loader.WorkflowDescriptor;
import com.opensymphony.workflow.loader.StepDescriptor;
import com.opensymphony.workflow.loader.ActionDescriptor;
import org.apache.log4j.Logger;
import javax.servlet.http.HttpServletResponse;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public class CustomFieldServlet {

    private static final Logger log = Logger.getLogger(CustomFieldServlet.class);

    private void createCustomField(HttpServletResponse resp, Map<String, Object> context) {

        CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();
        FieldConfigSchemeManager fieldConfigSchemeManager = ComponentAccessor.getFieldConfigSchemeManager();
        FieldLayoutManager fieldLayoutManager = ComponentAccessor.getFieldLayoutManager();
        FieldScreenSchemeManager fieldScreenSchemeManager = ComponentAccessor.getFieldScreenSchemeManager();
        WorkflowManager workflowManager = ComponentAccessor.getWorkflowManager();

        try {
            String fieldName = "Score";

            CustomField customField = customFieldManager.getCustomFieldObjectByName(fieldName);

            // Check if the custom field already exists
            if (customField == null) {
                // Create the custom field with a global context
                customField = customFieldManager.createCustomField(
                    fieldName,
                    "The score of the issue's description",
                    customFieldManager.getCustomFieldType("com.atlassian.jira.plugin.system.customfieldtypes:float"),
                    customFieldManager.getCustomFieldSearcher("com.atlassian.jira.plugin.system.customfieldtypes:exactnumber"),
                    Collections.singletonList(GlobalIssueContext.getInstance()),
                    null
                );

                // Store the custom field ID in the context
                context.put("scoreFieldKey", customField.getId());

                // Associate the custom field with the default screen
                Collection<FieldScreen> screens = ComponentAccessor.getFieldScreenManager().getFieldScreens();
                final CustomField finalCustomField = customField;

                for (FieldScreen screen : screens) {
                    List<FieldScreenTab> tabs = screen.getTabs();
                    for (FieldScreenTab tab : tabs) {
                        if (tab.getFieldScreenLayoutItems().stream().noneMatch(item -> item.getFieldId().equals(finalCustomField.getId()))) {
                            tab.addFieldScreenLayoutItem(customField.getId());
                        }
                    }
                }

                // Ensure the custom field is on all relevant screen schemes
                Collection<FieldScreenScheme> screenSchemes = fieldScreenSchemeManager.getFieldScreenSchemes();
                for (FieldScreenScheme screenScheme : screenSchemes) {
                    List<FieldScreenSchemeItem> schemeItems = (List<FieldScreenSchemeItem>) screenScheme.getFieldScreenSchemeItems();

                    for (FieldScreenSchemeItem item : schemeItems) {
                        FieldScreen fieldScreen = item.getFieldScreen();
                        List<FieldScreenTab> tabs = fieldScreen.getTabs();

                        for (FieldScreenTab tab : tabs) {
                            if (tab.getFieldScreenLayoutItems().stream().noneMatch(screenItem -> screenItem.getFieldId().equals(finalCustomField.getId()))) {
                                tab.addFieldScreenLayoutItem(customField.getId());
                            }
                        }
                    }
                }

                // Hide the custom field in all field configurations to make it read-only
                Collection<EditableFieldLayout> fieldLayouts = fieldLayoutManager.getEditableFieldLayouts();
                for (EditableFieldLayout editableFieldLayout : fieldLayouts) {
                    FieldLayoutItem fieldLayoutItem = editableFieldLayout.getFieldLayoutItem(customField);
                    if (fieldLayoutItem != null) {
                        editableFieldLayout.hide(fieldLayoutItem);
                        fieldLayoutManager.storeEditableFieldLayout(editableFieldLayout);
                    }
                }

                // Inject JavaScript to make the custom field read-only
                String script = "<script type=\"text/javascript\">" +
                                "AJS.toInit(function() {" +
                                "    var customFieldId = '" + context.get("scoreFieldKey") + "';" +
                                "    var field = AJS.$('#customfield_' + customFieldId);" +
                                "    field.prop('disabled', true);" +
                                "});" +
                                "</script>";
                resp.getWriter().write(script);
            } else {
                // If custom field already exists, store its ID in the context
                context.put("scoreFieldKey", customField.getId());
            }

        } catch (Exception e) {
            log.error("Error creating custom field", e);
        }
    }
}














<html>
<head>
    <title>Score Management</title>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script type="text/javascript">
        AJS.toInit(function() {
            var customFieldKey = "$scoreFieldKey";
            if(customFieldKey) {
                var field = AJS.$("#customfield_" + customFieldKey);
                if(field.length) {
                    field.prop('disabled', true);
                }
            }
        });
    </script>
</head>
<body>
    <h1>Manage Scores</h1>
    <!-- Your HTML content -->
</body>
</html>