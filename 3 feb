private void createCustomField(HttpServletResponse resp) {

    CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();
    FieldConfigSchemeManager fieldConfigSchemeManager = ComponentAccessor.getFieldConfigSchemeManager();

    try {
        String fieldName = "Score";

        CustomField customManager.getCustomFieldObjectByName(fieldName);

        // Check if the custom field already exists
        if (customField == null) {
            // Create the custom field
            customField = customFieldManager.createCustomField(
                fieldName,
                "The score of the issue's description",
                customFieldManager.getCustomFieldType("com.atlassian.jira.plugin.system.customfieldtypes:float"),
                customFieldManager.getCustomFieldSearcher("com.atlassian.jira.plugin.system.customfieldtypes:exactnumber"),
                Collections.emptyList(),
                null
            );

            // Associate the custom field with the default screen
            Collection<FieldScreen> screens = ComponentAccessor.getFieldScreenManager().getFieldScreens();
            final CustomField finalCustomField = customField;

            for (FieldScreen screen : screens) {
                List<FieldScreenTab> tabs = screen.getTabs();
                for (FieldScreenTab tab : tabs) {
                    if (tab.getFieldScreenLayoutItems().stream().anyMatch(item -> item.getFieldId().equals(finalCustomField.getId()))) {
                        tab.addFieldScreenLayoutItem(customField.getId());
                    }
                }
            }

            // Set the custom field as read-only for users by updating the field configuration scheme
            FieldConfigScheme scheme = fieldConfigSchemeManager.getConfigSchemesForField(customField).iterator().next();
            scheme.setFieldConfiguration(customField, true);
            fieldConfigSchemeManager.updateConfigScheme(scheme);
        }
    } catch (Exception e) {
        log.error("Error creating custom field", e);
    }
}






import com.atlassian.jira.issue.fields.layout.field.FieldLayoutManager;
import com.atlassian.jira.issue.fields.layout.field.FieldLayoutItem;
import com.atlassian.jira.issue.fields.layout.field.EditableDefaultFieldLayout;
import com.atlassian.jira.issue.fields.layout.field.ImmutableFieldLayout;
import com.atlassian.jira.issue.fields.layout.field.FieldConfigurationScheme;

private void createCustomField(HttpServletResponse resp) {

    CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();
    FieldLayoutManager fieldLayoutManager = ComponentAccessor.getComponent(FieldLayoutManager.class);

    try {
        String fieldName = "Score";

        CustomField customField = customFieldManager.getCustomFieldObjectByName(fieldName);

        // Check if the custom field already exists
        if (customField == null) {
            // Create the custom field
            customField = customFieldManager.createCustomField(
                fieldName,
                "The score of the issue's description",
                customFieldManager.getCustomFieldType("com.atlassian.jira.plugin.system.customfieldtypes:float"),
                customFieldManager.getCustomFieldSearcher("com.atlassian.jira.plugin.system.customfieldtypes:exactnumber"),
                Collections.emptyList(),
                null
            );

            // Associate the custom field with the default screen
            Collection<FieldScreen> screens = ComponentAccessor.getFieldScreenManager().getFieldScreens();
            final CustomField finalCustomField = customField;

            for (FieldScreen screen : screens) {
                List<FieldScreenTab> tabs = screen.getTabs();
                for (FieldScreenTab tab : tabs) {
                    if (tab.getFieldScreenLayoutItems().stream().anyMatch(item -> item.getFieldId().equals(finalCustomField.getId()))) {
                        tab.addFieldScreenLayoutItem(customField.getId());
                    }
                }
            }

            // Set the custom field as read-only for users by updating the field layout
            EditableDefaultFieldLayout fieldLayout = (EditableDefaultFieldLayout) fieldLayoutManager.getEditableDefaultFieldLayout();
            FieldLayoutItem fieldLayoutItem = fieldLayout.getFieldLayoutItem(customField);
            fieldLayoutItem.setHidden(false);
            fieldLayoutItem.setRequired(false);
            fieldLayoutItem.setRendererType("readonly");

            // Update the field layout
            fieldLayoutManager.storeEditableDefaultFieldLayout(fieldLayout);
        }
    } catch (Exception e) {
        log.error("Error creating custom field", e);
    }
}