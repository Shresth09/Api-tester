public class CustomFieldServlet {

    private static final Logger log = Logger.getLogger(CustomFieldServlet.class);

    private void createCustomField(HttpServletResponse resp) {

        CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();
        FieldConfigSchemeManager fieldConfigSchemeManager = ComponentAccessor.getFieldConfigSchemeManager();
        FieldLayoutManager fieldLayoutManager = ComponentAccessor.getFieldLayoutManager();
        FieldScreenSchemeManager fieldScreenSchemeManager = ComponentAccessor.getFieldScreenSchemeManager();
        WorkflowManager workflowManager = ComponentAccessor.getWorkflowManager();

        try {
            String fieldName = "Score";

            CustomField customField = customFieldManager.getCustomFieldObjectByName(fieldName);

            // Check if the custom field already exists
            if (customField == null) {
                // Create the custom field with a global context
                customField = customFieldManager.createCustomField(
                    fieldName,
                    "The score of the issue's description",
                    customFieldManager.getCustomFieldType("com.atlassian.jira.plugin.system.customfieldtypes:float"),
                    customFieldManager.getCustomFieldSearcher("com.atlassian.jira.plugin.system.customfieldtypes:exactnumber"),
                    Collections.singletonList(GlobalIssueContext.getInstance()),
                    null
                );

                // Associate the custom field with the default screen
                Collection<FieldScreen> screens = ComponentAccessor.getFieldScreenManager().getFieldScreens();
                final CustomField finalCustomField = customField;

                for (FieldScreen screen : screens) {
                    List<FieldScreenTab> tabs = screen.getTabs();
                    for (FieldScreenTab tab : tabs) {
                        if (tab.getFieldScreenLayoutItems().stream().noneMatch(item -> item.getFieldId().equals(finalCustomField.getId()))) {
                            tab.addFieldScreenLayoutItem(customField.getId());
                        }
                    }
                }

                // Ensure the custom field is on all relevant screen schemes
                Collection<FieldScreenScheme> screenSchemes = fieldScreenSchemeManager.getFieldScreenSchemes();
                for (FieldScreenScheme screenScheme : screenSchemes) {
                    List<FieldScreenSchemeItem> schemeItems = (List<FieldScreenSchemeItem>) screenScheme.getFieldScreenSchemeItems();

                    for (FieldScreenSchemeItem item : schemeItems) {
                        FieldScreen fieldScreen = item.getFieldScreen();
                        List<FieldScreenTab> tabs = fieldScreen.getTabs();

                        for (FieldScreenTab tab : tabs) {
                            if (tab.getFieldScreenLayoutItems().stream().noneMatch(screenItem -> screenItem.getFieldId().equals(finalCustomField.getId()))) {
                                tab.addFieldScreenLayoutItem(customField.getId());
                            }
                        }
                    }
                }

                // Add the workflow property to make the custom field read-only for all workflows
                Collection<JiraWorkflow> workflows = workflowManager.getWorkflows();
                for (JiraWorkflow workflow : workflows) {
                    for (StepDescriptor step : workflow.getAllSteps()) {
                        Map<String, String> properties = step.getMetaAttributes();
                        properties.put("jira.permission.edit.group", "-1");  // "-1" indicates no group has permission to edit
                    }
                }
            }

        } catch (Exception e) {
            log.error("Error creating custom field", e);
        }
    }
}