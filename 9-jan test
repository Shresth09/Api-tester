package com.example.plugins.tutorial.servlet;

import com.atlassian.sal.api.pluginsettings.PluginSettings;
import com.atlassian.sal.api.pluginsettings.PluginSettingsFactory;
import com.atlassian.templaterenderer.TemplateRenderer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

public class IssueCRUD extends HttpServlet {

    private static final Logger log = LoggerFactory.getLogger(IssueCRUD.class);
    private final TemplateRenderer templateRenderer;
    private final PluginSettingsFactory pluginSettingsFactory;
    private static final String PLUGIN_STORAGE_KEY = "com.example.plugins.tutorial.servlet.IssueCRUD";
    private static final String DEFAULT_API_URL = "http://default-api-url.com"; // Default URL

    public IssueCRUD(TemplateRenderer templateRenderer, PluginSettingsFactory pluginSettingsFactory) {
        this.templateRenderer = templateRenderer;
        this.pluginSettingsFactory = pluginSettingsFactory;
    }

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String action = req.getParameter("action");
        if ("getUrl".equals(action)) {
            PluginSettings pluginSettings = pluginSettingsFactory.createGlobalSettings();
            String apiUrl = (String) pluginSettings.get(PLUGIN_STORAGE_KEY + ".apiUrl");
            if (apiUrl == null) {
                apiUrl = DEFAULT_API_URL; // Use default URL if not set
            }
            resp.setContentType("application/json");
            resp.getWriter().write("{\"apiUrl\": \"" + apiUrl + "\"}");
        } else {
            resp.setContentType("text/html;charset=utf-8");
            templateRenderer.render("templates/issuecrud-page.vm", resp.getWriter());
        }
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String action = req.getParameter("action");
        if ("saveUrl".equals(action)) {
            String apiUrl = req.getParameter("url");
            PluginSettings pluginSettings = pluginSettingsFactory.createGlobalSettings();
            pluginSettings.put(PLUGIN_STORAGE_KEY + ".apiUrl", apiUrl);
            resp.getWriter().write("URL saved successfully!");
        }
    }
}











<!-- templates/issuecrud-page.vm -->
<html>
<head>
    <title>Fetch and Display URL</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
    <h1>Fetch and Display URL</h1>
    <p><strong>Current URL:</strong> <span id="current-url">Loading...</span></p>
</body>
</html>

<script type="module">
    AJS.toInit(function() {
        console.log("Document ready, fetching URL...");
        jQuery.ajax({
            url: AJS.params.baseURL + "/plugins/servlet/issuecrud?action=getUrl",
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                const apiUrl = response.apiUrl;
                console.log("Fetched URL:", apiUrl);
                AJS.$("#current-url").text(apiUrl);
            },
            error: function() {
                console.log("Failed to fetch URL");
                AJS.$("#current-url").text("Failed to load URL.");
            }
        });
    });
</script>








===#=#=#==#=#=@==@++#+#+#+#+=#=#=#
=#=#==#=#=#=#+#+#+#=+#+#+#+#+#++#+#+#=


package com.example.plugins.tutorial.servlet;

import com.atlassian.sal.api.pluginsettings.PluginSettings;
import com.atlassian.sal.api.pluginsettings.PluginSettingsFactory;
import com.atlassian.templaterenderer.TemplateRenderer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

public class IssueCRUD extends HttpServlet {

    private static final Logger log = LoggerFactory.getLogger(IssueCRUD.class);
    private final TemplateRenderer templateRenderer;
    private final PluginSettingsFactory pluginSettingsFactory;
    private static final String PLUGIN_STORAGE_KEY = "com.example.plugins.tutorial.servlet.IssueCRUD";
    private static final String DEFAULT_API_URL = "http://default-api-url.com"; // Default URL

    public IssueCRUD(TemplateRenderer templateRenderer, PluginSettingsFactory pluginSettingsFactory) {
        this.templateRenderer = templateRenderer;
        this.pluginSettingsFactory = pluginSettingsFactory;
    }

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        // Add CORS headers
        resp.setHeader("Access-Control-Allow-Origin", "*"); // Allow all origins
        resp.setHeader("Access-Control-Allow-Methods", "GET, POST, OPTIONS"); // Allow GET, POST, and OPTIONS methods
        resp.setHeader("Access-Control-Allow-Headers", "Content-Type"); // Allow Content-Type header

        String action = req.getParameter("action");
        if ("getUrl".equals(action)) {
            PluginSettings pluginSettings = pluginSettingsFactory.createGlobalSettings();
            String apiUrl = (String) pluginSettings.get(PLUGIN_STORAGE_KEY + ".apiUrl");
            if (apiUrl == null) {
                apiUrl = DEFAULT_API_URL; // Use default URL if not set
            }
            resp.setContentType("application/json");
            resp.getWriter().write("{\"apiUrl\": \"" + apiUrl + "\"}");
        } else {
            resp.setContentType("text/html;charset=utf-8");
            templateRenderer.render("templates/issuecrud-page.vm", resp.getWriter());
        }
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        // Add CORS headers
        resp.setHeader("Access-Control-Allow-Origin", "*"); // Allow all origins
        resp.setHeader("Access-Control-Allow-Methods", "GET, POST, OPTIONS"); // Allow GET, POST, and OPTIONS methods
        resp.setHeader("Access-Control-Allow-Headers", "Content-Type"); // Allow Content-Type header

        String action = req.getParameter("action");
        if ("saveUrl".equals(action)) {
            String apiUrl = req.getParameter("url");
            PluginSettings pluginSettings = pluginSettingsFactory.createGlobalSettings();
            pluginSettings.put(PLUGIN_STORAGE_KEY + ".apiUrl", apiUrl);
            resp.getWriter().write("URL saved successfully!");
        }
    }

    @Override
    protected void doOptions(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        // Add CORS headers for OPTIONS requests
        resp.setHeader("Access-Control-Allow-Origin", "*"); // Allow all origins
        resp.setHeader("Access-Control-Allow-Methods", "GET, POST, OPTIONS"); // Allow GET, POST, and OPTIONS methods
        resp.setHeader("Access-Control-Allow-Headers", "Content-Type"); // Allow Content-Type header
    }
}










##*&#&#&#&#&#&&#&#&#
#=#+#+#+#+#+#+##++#

<!-- templates/issuecrud-page.vm -->
<html>
<head>
    <title>Fetch and Display URL</title>
    <script src="${contextPath}/s/d41d8cd98f00b204e9800998ecf8427e/en_US-e9781b0c5f5c1b8bb1f9a54bf1b9e7d8/b3/6/2/_/download/contextbatch/js/aui/aui.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
    <h1>Fetch and Display URL</h1>
    <p><strong>Current URL:</strong> <span id="current-url">Loading...</span></p>
</body>
</html>

<script type="module">
    AJS.toInit(function() {
        jQuery(document).ready(function() {
            initStuff();
        });
    });

    function initStuff() {
        console.log("Initializing Stuff...");

        jQuery.ajax({
            url: AJS.params.baseURL + "/plugins/servlet/issuecrud?action=getUrl",
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                const apiUrl = response.apiUrl;
                console.log("Fetched URL:", apiUrl);
                AJS.$("#current-url").text(apiUrl);
            },
            error: function() {
                console.log("Failed to fetch URL");
                AJS.$("#current-url").text("Failed to load URL.");
            }
        });
    }

    if (typeof jQuery != "undefined") {
        jQuery(document).ready(function() {
            initStuff();
        });
    }
    document.addEventListener("DOMContentLoaded", function() {
        initStuff();
        JIRA.bind(JIRA.Events.NEW_CONTENT_ADDED, function() {
            initStuff();
        });
    });
</script>












New new new 
New new new 


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Fetch and Display URL</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
    <div class="container">
        <h2>Fetch and Display URL</h2>
        <button onclick="fetchUrl()">Fetch URL</button>
        <div class="response-group">
            <h3>Response</h3>
            <div class="response-body">
                <strong>Response Body:</strong>
                <pre id="responseBody"></pre>
            </div>
        </div>
    </div>

    <script>
        function fetchUrl() {
            const apiUrl = `${window.location.origin}/jira/plugins/servlet/issuecrud?action=getUrl`;

            fetch(apiUrl)
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    document.getElementById('responseBody').textContent = JSON.stringify(data, null, 2);
                })
                .catch(error => {
                    document.getElementById('responseBody').textContent = `Error: ${error}`;
                });
        }

        // Automatically fetch the URL when the page loads
        document.addEventListener("DOMContentLoaded", fetchUrl);
    </script>
</body>
</html>








Dodododododododododododood
Dodooddodododododododododod

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Fetch and Update URL</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
    <div class="container">
        <h2>Fetch and Update URL</h2>
        <button onclick="fetchUrl()">Fetch URL</button>
        <div class="response-group">
            <h3>Response</h3>
            <div class="response-body">
                <strong>Current URL:</strong>
                <pre id="currentUrl">Loading...</pre>
            </div>
        </div>
        
        <!-- Input to update the URL -->
        <div class="update-group">
            <input type="text" id="newUrl" placeholder="Enter new API URL">
            <button onclick="updateUrl()">Update URL</button>
        </div>
    </div>

    <script>
        function fetchUrl() {
            const apiUrl = `${window.location.origin}/jira/plugins/servlet/issuecrud?action=getUrl`;

            fetch(apiUrl)
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    document.getElementById('currentUrl').textContent = `Current URL: ${data.apiUrl}`;
                })
                .catch(error => {
                    document.getElementById('currentUrl').textContent = `Error: ${error}`;
                });
        }

        function updateUrl() {
            const newUrl = document.getElementById('newUrl').value;
            const apiUrl = `${window.location.origin}/jira/plugins/servlet/issuecrud`;

            fetch(apiUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                body: `action=saveUrl&url=${encodeURIComponent(newUrl)}`
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                return response.text();
            })
            .then(data => {
                document.getElementById('currentUrl').textContent = `URL updated successfully! Current URL: ${newUrl}`;
            })
            .catch(error => {
                document.getElementById('currentUrl').textContent = `Error: ${error}`;
            });
        }

        // Automatically fetch the URL when the page loads
        document.addEventListener("DOMContentLoaded", fetchUrl);
    </script>
</body>
</html> 