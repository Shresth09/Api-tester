You're absolutely right! The issue lies in how you're trying to use the allowedProjectKeys variable within the Velocity template.
Problem:
 * You're defining allowedProjectKeys within a JavaScript block inside the Velocity template.
 * Velocity templates are rendered on the server-side, while JavaScript executes on the client-side.
 * Therefore, Velocity cannot directly access or use variables defined within JavaScript.
Solution:
 * Pass Data from Servlet to Velocity:
   * In your Servlet: When handling the request for /plugins/servlet/issuecrud?action=getSelectedProjects, instead of just returning the projectKeys as a string, include them in the response object that will be passed to the Velocity template.
     Map<String, Object> context = new HashMap<>(); 
context.put("allowedProjectKeys", projectKeys.split(",")); 
return VelocityUtils.getRenderedTemplate("templates/popup.vm", context, request, response); 

 * Access Data in Velocity:
   * In your popup.vm template, you can now directly access the allowedProjectKeys variable:
     #if (${project.key} in $allowedProjectKeys) 
    <a id="show-popup" class="aui-button">AI-RQM Analysis</a>
#else
    <p>This functionality is not available for this project.</p> 
#end

Explanation:
 * The servlet now passes the allowedProjectKeys list as part of the context to the Velocity template.
 * This allows the Velocity template to access and use the list directly in its conditional logic.
By making this change, you'll be able to correctly check the allowed project keys and control the visibility of your button within the Velocity template.
Remember to adapt this approach to your specific servlet implementation and data handling.
I hope this revised solution addresses the issue you're facing!











else if ("getSelectedProjects".equals(action)) {
    PluginSettings pluginSettings = pluginSettingsFactory.createGlobalSettings();
    String selectedProjects = (String) pluginSettings.get(PLUGIN_STORAGE_KEY + ".selectedProjects");

    if (selectedProjects == null || selectedProjects.isEmpty()) {
        // No selected projects, return an empty list
        List<String> allowedProjectKeys = new ArrayList<>(); 

        // Prepare the response data
        Map<String, Object> responseData = new HashMap<>();
        responseData.put("allowedProjectKeys", allowedProjectKeys);

        // Render the Velocity template with the data
        renderTemplate(req, resp, "templates/popup.vm", responseData);
    } else {
        // Split the selected projects string into a list
        List<String> allowedProjectKeys = Arrays.asList(selectedProjects.split(",")); 

        // Prepare the response data
        Map<String, Object> responseData = new HashMap<>();
        responseData.put("allowedProjectKeys", allowedProjectKeys);

        // Render the Velocity template with the data
        renderTemplate(req, resp, "templates/popup.vm", responseData);
    }
}
