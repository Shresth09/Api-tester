It sounds like the `popup.vm` template is being rendered after `issuecrud-page.vm`, and the output of `popup.vm` is being appended to the end of the HTML generated by `issuecrud-page.vm`. This is why you're seeing the span from `popup.vm` at the end of the HTML content from `issuecrud-page.vm`.

One way to address this issue is to ensure that you only render `popup.vm` when it's actually needed, and not immediately after `issuecrud-page.vm`. Instead, you can dynamically load `popup.vm` content using JavaScript and insert it into the DOM where needed.

Here's a strategy to achieve this:

### 1. **Render only `issuecrud-page.vm` in the Servlet:**

```java
else {
    resp.setContentType("text/html; charset=utf-8");
    templateRenderer.render("templates/issuecrud-page.vm", resp.getWriter());
}
```

### 2. **Dynamically load `popup.vm` content using JavaScript:**
Add a placeholder for the popup content in `issuecrud-page.vm` and then use JavaScript to load the `popup.vm` content.

### Example `issuecrud-page.vm`:

```vm
<html>
<head>
    <script type="text/javascript">
        AJS.toInit(function() {
            // JavaScript code to handle project key selection and storage
            function saveSelectedProjects(selectedProjects) {
                var projectKeys = selectedProjects.join(",");
                jQuery.ajax({
                    url: AJS.params.baseURL + "/plugins/servlet/issuecrud?action=applySelection&keys=" + projectKeys,
                    type: 'POST',
                    success: function(response) {
                        console.log("Projects applied successfully!");
                    },
                    error: function(xhr, status, error) {
                        console.error("Error applying project keys:", status, error);
                    }
                });
            }

            // Load popup content dynamically
            function loadPopupContent() {
                jQuery.ajax({
                    url: AJS.params.baseURL + "/plugins/servlet/issuecrud?action=loadPopup",
                    type: 'GET',
                    success: function(response) {
                        AJS.$("#popup-container").html(response);
                    },
                    error: function(xhr, status, error) {
                        console.error("Error loading popup content:", status, error);
                    }
                });
            }

            // Call the function to load popup content
            loadPopupContent();

            // Assuming you have a mechanism to select projects
            // Add code to capture the selection and call saveSelectedProjects
        });
    </script>
</head>
<body>
    <h2>Configure Allowed Project Keys</h2>
    <!-- UI elements for selecting projects, e.g., checkboxes or a dropdown -->

    <!-- Placeholder for the popup content -->
    <div id="popup-container"></div>
</body>
</html>
```

### 3. **Handle the `loadPopup` action in the Servlet:**

Add a new action in your servlet to handle loading the popup content separately.

```java
else if ("loadPopup".equals(action)) {
    PluginSettings pluginSettings = pluginSettingsFactory.createGlobalSettings();
    String selectedProjects = (String) pluginSettings.get(PLUGIN_STORAGE_KEY + ".selectedProjects");
    List<String> allowedProjectKeys = new ArrayList<>();
    if (selectedProjects != null && !selectedProjects.isEmpty()) {
        allowedProjectKeys = Arrays.asList(selectedProjects.split(","));
    }
    Map<String, Object> context = new HashMap<>();
    context.put("allowedProjectKeys", allowedProjectKeys);
    Log.info("Context for popup: " + context);

    // Set content type and render popup.vm
    resp.setContentType("text/html; charset=utf-8");
    templateRenderer.render("templates/popup.vm", context, resp.getWriter());
}
```

By following this approach, you'll ensure that the `popup.vm` content is loaded and inserted into the DOM dynamically, only when needed, without being appended to the end of the `issuecrud-page.vm`.

Try implementing these changes and let me know if it resolves the issue!











import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.project.Project;
import com.atlassian.jira.project.ProjectManager;
import com.atlassian.plugin.spring.scanner.annotation.imports.ComponentImport;
import com.atlassian.templaterenderer.TemplateRenderer;
import com.atlassian.sal.api.pluginsettings.PluginSettings;
import com.atlassian.sal.api.pluginsettings.PluginSettingsFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public class IssueCRUD extends HttpServlet {
    private static final Logger Log = LoggerFactory.getLogger(IssueCRUD.class);
    private final TemplateRenderer templateRenderer;
    private final PluginSettingsFactory pluginSettingsFactory;
    private static final String PLUGIN_STORAGE_KEY = "com.example.plugins.tutorial.servlet.IssueCRUD";

    public IssueCRUD(TemplateRenderer templateRenderer, PluginSettingsFactory pluginSettingsFactory) {
        this.templateRenderer = templateRenderer;
        this.pluginSettingsFactory = pluginSettingsFactory;
    }

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        resp.setHeader("Access-Control-Allow-Origin", "*");
        resp.setHeader("Access-Control-Allow-Methods", "GET, POST, OPTIONS");
        resp.setHeader("Access-Control-Allow-Headers", "Content-Type");

        String action = req.getParameter("action");
        if ("getProjects".equals(action)) {
            ProjectManager projectManager = ComponentAccessor.getProjectManager();
            List<Project> projects = projectManager.getProjectObjects();
            String projectList = projects.stream()
                    .map(project -> project.getKey() + "-" + project.getName())
                    .collect(Collectors.joining(","));
            resp.setContentType("text/plain");
            resp.getWriter().write(projectList);
        } else if ("getSelectedProjects".equals(action)) {
            PluginSettings pluginSettings = pluginSettingsFactory.createGlobalSettings();
            String selectedProjects = (String) pluginSettings.get(PLUGIN_STORAGE_KEY + ".selectedProjects");
            if (selectedProjects == null) {
                selectedProjects = "";
            }
            resp.setContentType("text/plain");
            resp.getWriter().write(selectedProjects);
        } else if ("applySelection".equals(action)) {
            String projectKeys = req.getParameter("keys");
            PluginSettings pluginSettings = pluginSettingsFactory.createGlobalSettings();
            pluginSettings.put(PLUGIN_STORAGE_KEY + ".selectedProjects", projectKeys);
            resp.setContentType("text/plain");
            resp.getWriter().write("Projects applied successfully!");

            // Call setPopup to render popup.vm
            setPopup(resp);
        } else {
            resp.setContentType("text/html; charset=utf-8");
            templateRenderer.render("templates/issuecrud-page.vm", resp.getWriter());
        }
    }

    private void setPopup(HttpServletResponse resp) throws IOException {
        PluginSettings pluginSettings = pluginSettingsFactory.createGlobalSettings();
        String selectedProjects = (String) pluginSettings.get(PLUGIN_STORAGE_KEY + ".selectedProjects");
        List<String> allowedProjectKeys = new ArrayList<>();
        if (selectedProjects != null && !selectedProjects.isEmpty()) {
            allowedProjectKeys = Arrays.asList(selectedProjects.split(","));
        }
        Map<String, Object> context = new HashMap<>();
        context.put("allowedProjectKeys", allowedProjectKeys);
        Log.info("Context for popup: " + context);

        // Set content type and render popup.vm
        resp.setContentType("text/html; charset=utf-8");
        templateRenderer.render("templates/popup.vm", context, resp.getWriter());
    }
}





<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>RQM URL Config</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
    <div class="container">
        <div class="aui-page-header-main">
            <h2>AI-ROM URL Configuration</h2>
        </div>
        <div>
            <h4 class="current">Current URL:</h4>
            <pre id="currentUrl" class="url-link">Loading...</pre>
        </div>
        <div class="update-group">
            <input type="text" id="newUrl" class="text medium-long-field" placeholder="Enter new API URL">
            <button onclick="updateUrl()" class="aui-button aui-button-primary">Update URL</button>
        </div>
        <br>
        <hr>
        <div>
            <h4 class="current">Select Projects: </h4>
            <input type="text" id="projectSearch" class="search-field" placeholder="Search projects...">
            <div id="projectList" class="project-list"></div>
            <div>
                <br>
                <button onclick="applySelection()" class="aui-button aui-button-primary">Apply</button>
                <label><input type="checkbox" id="selectAll" onclick="selectAllProjects(this)"> Select All</label>
            </div>
        </div>
        <!-- Placeholder for popup content -->
        <div id="popup-container"></div>
    </div>

    <script>
        let allProjects = [];
        let selectedProjects = [];

        function fetchUrl() {
            const apiurl = window.location.origin + "/jira/plugins/servlet/issuecrud?action=getUrl";
            fetch(apiurl, {
                method: 'GET',
                headers: {
                    'Referer': window.location.href,
                    "Content-Type": 'application/json'
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('HTTP error! Status: ' + response.status);
                }
                return response.json();
            })
            .then(data => {
                document.getElementById('currentUrl').textContent = data.apiurl;
                document.getElementById('currentUrl').className = "url-link";
                document.getElementById('newUrl').value = data.apiurl;
            })
            .catch(error => {
                document.getElementById('currentUrl').textContent = "Error: " + error;
                document.getElementById('currentUrl').className = "";
            });
        }

        function updateUrl() {
            const newUrl = document.getElementById('newUrl').value;
            const apiurl = window.location.origin + "/jira/plugins/servlet/issuecrud?action=updateUrl&url=" + newUrl;
            fetch(apiurl, {
                method: 'GET',
                headers: {
                    'Referer': window.location.href
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('HTTP error! Status: ' + response.status);
                }
                return response.text();
            })
            .then(data => {
                document.getElementById('currentUrl').textContent = newUrl;
                document.getElementById('currentUrl').className = "url-link";
                document.getElementById('newUrl').value = newUrl;
                alert("URL updated successfully!");
            })
            .catch(error => {
                document.getElementById('currentUrl').textContent = "Error: " + error;
                document.getElementById('currentUrl').className = "";
                alert("Error: " + error);
            });
        }

        function fetchProjects() {
            const apiurl = window.location.origin + "/jira/plugins/servlet/issuecrud?action=getProjects";
            fetch(apiurl, {
                method: 'GET',
                headers: {
                    'Referer': window.location.href,
                    "Content-Type": 'text/plain'
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('HTTP error! Status: ' + response.status);
                }
                return response.text();
            })
            .then(data => {
                allProjects = data.split(",");
                updateProjectList();
            })
            .catch(error => {
                console.log("Error Fetching Projects: ", error);
            });
        }

        function fetchSelectedProjects() {
            const apiurl = window.location.origin + "/jira/plugins/servlet/issuecrud?action=getSelectedProjects";
            fetch(apiurl, {
                method: 'GET',
                headers: {
                    'Referer': window.location.href,
                    "Content-Type": 'text/plain'
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('HTTP error! Status: ' + response.status);
                }
                return response.text();
            })
            .then(data => {
                selectedProjects = data.split(",");
                updateProjectList();
            })
            .catch(error => {
                console.log("Error Fetching Selected Projects: ", error);
            });
        }

        function updateProjectList(filteredProjects = []) {
            const projectList = document.getElementById('projectList');
            projectList.innerHTML = "";

            const projectsToDisplay = filteredProjects.length ? filteredProjects : allProjects;
            projectsToDisplay.forEach(project => {
                const [key, name] = project.split("-");
                const label = document.createElement('label');
                const checkbox = document.createElement('input');
                checkbox.type = "checkbox";
                checkbox.value = key;

                // Check if the project is selected
                if (selectedProjects.includes(key)) {
                    checkbox.checked = true;
                }

                label.appendChild(checkbox);
                label.appendChild(document.createTextNode(`${key} ${name}`));
                projectList.appendChild(label);
                projectList.appendChild(document.createElement('br'));
            });

            if (filteredProjects.length == 0) {
                projectList.innerHTML = '<p style="color: red; font-weight: bold;">No projects found</p>';
            }
        }

        function filterProjectList(filter) {
            const filteredProjects = allProjects.filter(project => project.toLowerCase().includes(filter));
            updateProjectList(filteredProjects);
        }

        function applySelection() {
            const selectedKeys = Array.from(document.querySelectorAll('input[type="checkbox"]:checked')).map(checkbox => checkbox.value);
            const apiurl = window.location.origin + "/jira/plugins/servlet/issuecrud?action=applySelection&keys=" + selectedKeys.join(",");

            fetch(apiurl, {
                method: 'GET',
                headers: {
                    'Referer': window.location.href
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('HTTP error! Status: ' + response.status);
                }
                return response.text();
            })
            .then(data => {
                alert("Projects applied successfully!");
                // Call the function to load popup content
                loadPopupContent();
            })
            .catch(error => {
                console.log("Error Applying Selection:", error);
                alert("Error: " + error);
            });
        }

        function selectAllProjects(source) {
            const checkboxes = document.querySelectorAll('input[type="checkbox"]');
            checkboxes.forEach(checkbox => {
                if (checkbox !== source) {
                    checkbox.checked = source.checked;
                }
            });
        }

        function loadPopupContent() {
            jQuery.ajax({
                url: window.location.origin + "/jira/plugins/servlet/issuecrud?action=loadPopup",
                type: 'GET',
                success: function(response) {
                    AJS.$("#popup-container").html(response);
                },
                error: function(xhr, status, error) {
                    console.error("Error loading popup content:", status, error);
                }
            });
        }

        // Ensure functions are called on page load
        document.addEventListener("DOMContentLoaded", function() {
            fetchUrl();
            fetchProjects();
            fetchSelectedProjects(); // Ensure this is called before updateProjectList

            // Attach event listener to the search input
            document.getElementById('projectSearch').addEventListener('input', function() {
                const filter = this.value.toLowerCase();
                filterProjectList(filter);
            });
        });
    </script>
</body>
</html>