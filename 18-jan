It sounds like the `popup.vm` template is being rendered after `issuecrud-page.vm`, and the output of `popup.vm` is being appended to the end of the HTML generated by `issuecrud-page.vm`. This is why you're seeing the span from `popup.vm` at the end of the HTML content from `issuecrud-page.vm`.

One way to address this issue is to ensure that you only render `popup.vm` when it's actually needed, and not immediately after `issuecrud-page.vm`. Instead, you can dynamically load `popup.vm` content using JavaScript and insert it into the DOM where needed.

Here's a strategy to achieve this:

### 1. **Render only `issuecrud-page.vm` in the Servlet:**

```java
else {
    resp.setContentType("text/html; charset=utf-8");
    templateRenderer.render("templates/issuecrud-page.vm", resp.getWriter());
}
```

### 2. **Dynamically load `popup.vm` content using JavaScript:**
Add a placeholder for the popup content in `issuecrud-page.vm` and then use JavaScript to load the `popup.vm` content.

### Example `issuecrud-page.vm`:

```vm
<html>
<head>
    <script type="text/javascript">
        AJS.toInit(function() {
            // JavaScript code to handle project key selection and storage
            function saveSelectedProjects(selectedProjects) {
                var projectKeys = selectedProjects.join(",");
                jQuery.ajax({
                    url: AJS.params.baseURL + "/plugins/servlet/issuecrud?action=applySelection&keys=" + projectKeys,
                    type: 'POST',
                    success: function(response) {
                        console.log("Projects applied successfully!");
                    },
                    error: function(xhr, status, error) {
                        console.error("Error applying project keys:", status, error);
                    }
                });
            }

            // Load popup content dynamically
            function loadPopupContent() {
                jQuery.ajax({
                    url: AJS.params.baseURL + "/plugins/servlet/issuecrud?action=loadPopup",
                    type: 'GET',
                    success: function(response) {
                        AJS.$("#popup-container").html(response);
                    },
                    error: function(xhr, status, error) {
                        console.error("Error loading popup content:", status, error);
                    }
                });
            }

            // Call the function to load popup content
            loadPopupContent();

            // Assuming you have a mechanism to select projects
            // Add code to capture the selection and call saveSelectedProjects
        });
    </script>
</head>
<body>
    <h2>Configure Allowed Project Keys</h2>
    <!-- UI elements for selecting projects, e.g., checkboxes or a dropdown -->

    <!-- Placeholder for the popup content -->
    <div id="popup-container"></div>
</body>
</html>
```

### 3. **Handle the `loadPopup` action in the Servlet:**

Add a new action in your servlet to handle loading the popup content separately.

```java
else if ("loadPopup".equals(action)) {
    PluginSettings pluginSettings = pluginSettingsFactory.createGlobalSettings();
    String selectedProjects = (String) pluginSettings.get(PLUGIN_STORAGE_KEY + ".selectedProjects");
    List<String> allowedProjectKeys = new ArrayList<>();
    if (selectedProjects != null && !selectedProjects.isEmpty()) {
        allowedProjectKeys = Arrays.asList(selectedProjects.split(","));
    }
    Map<String, Object> context = new HashMap<>();
    context.put("allowedProjectKeys", allowedProjectKeys);
    Log.info("Context for popup: " + context);

    // Set content type and render popup.vm
    resp.setContentType("text/html; charset=utf-8");
    templateRenderer.render("templates/popup.vm", context, resp.getWriter());
}
```

By following this approach, you'll ensure that the `popup.vm` content is loaded and inserted into the DOM dynamically, only when needed, without being appended to the end of the `issuecrud-page.vm`.

Try implementing these changes and let me know if it resolves the issue!