public void updateJiraCustomFields(String issueKey, String customFieldId1, String newValue1, 
                                   String customFieldId2, String newValue2, String jiraBaseUrl, HttpHeaders headers) {
    try {
        // Construct the Jira URL
        String jiraUpdateUrl = jiraBaseUrl + "/rest/api/2/issue/" + issueKey;

        // Create JSON payload with both custom fields
        String requestBody = "{ \"fields\": { \"" + customFieldId1 + "\": \"" + newValue1 + "\", " +
                                              "\"" + customFieldId2 + "\": \"" + newValue2 + "\" } }";

        // Create the HTTP entity with headers
        HttpEntity<String> entity = new HttpEntity<>(requestBody, headers);

        // Send the PUT request
        RestTemplate restTemplate = new RestTemplate();
        ResponseEntity<String> response = restTemplate.exchange(jiraUpdateUrl, HttpMethod.PUT, entity, String.class);

        // Log the response
        System.out.println("Jira response: " + response.getBody());
    } catch (Exception e) {
        e.printStackTrace();
    }
}








try {
    // Sending the POST request and getting the response
    ResponseEntity<String> rrpResponse = restTemplate.exchange(rrpURL, HttpMethod.POST, rrpPostEntity, String.class);

    // Logging the response
    String rrpResponseBody = rrpResponse.getBody();
    System.out.println("Response = " + rrpResponseBody);

    // Removing unwanted Unicode characters (if necessary)
    if (rrpResponseBody != null) {
        rrpResponseBody = rrpResponseBody.replace("\u00A0", "").trim();
    }

    // Parsing JSON response using Jackson
    ObjectMapper objectMapper = new ObjectMapper();
    JsonNode jsonNode = objectMapper.readTree(rrpResponseBody);

    // Ensuring the response is a valid JSON object
    if (jsonNode.isObject()) {
        String r_status = jsonNode.path("requestStatus").asText();
        String msg = jsonNode.path("message").asText();

        System.out.println("Request Status: " + r_status);
        System.out.println("Message: " + msg);
    } else {
        System.out.println("Invalid JSON response");
    }

} catch (Exception e) {
    e.printStackTrace();
} 







try {
    ResponseEntity<String> response = restTemplate.exchange(urlTofetchCustomFields, HttpMethod.GET, entity, String.class);
    
    ObjectMapper objectMapper = new ObjectMapper();
    JsonNode rootNode = objectMapper.readTree(response.getBody());
    
    JsonNode issueTypeNode = rootNode.path("fields").path("issuetype");
    String issueType = issueTypeNode.path("name").asText();
    
    System.out.println("ISSUE TYPE IS: " + issueType);

    // Only process if issue type matches Planview
    if ("Planview".equals(issueType)) {
        JsonNode namesNode = rootNode.path("names");

        // Map to store required custom field IDs
        Map<String, String> customFieldIds = new HashMap<>();
        List<String> requiredFields = List.of("Planview ID", "RRP Integration Failure", "RRP Error Message");

        // Efficient single iteration over the namesNode
        for (Iterator<Map.Entry<String, JsonNode>> fieldsIterator = namesNode.fields(); fieldsIterator.hasNext(); ) {
            Map.Entry<String, JsonNode> field = fieldsIterator.next();

            String fieldName = field.getValue().asText();
            if (requiredFields.contains(fieldName)) {
                customFieldIds.put(fieldName, field.getKey());
            }

            // Stop early if all fields are found
            if (customFieldIds.size() == requiredFields.size()) {
                break;
            }
        }

        // Retrieve the IDs
        String planviewCustomFieldId = customFieldIds.get("Planview ID");
        String rrpIntegrationFailureId = customFieldIds.get("RRP Integration Failure");
        String rrpErrorMessageId = customFieldIds.get("RRP Error Message");

        System.out.println("Planview ID: " + planviewCustomFieldId);
        System.out.println("RRP Integration Failure ID: " + rrpIntegrationFailureId);
        System.out.println("RRP Error Message ID: " + rrpErrorMessageId);
    }
} catch (Exception e) {
    e.printStackTrace();
}