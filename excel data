<!DOCTYPE html>
<html>
<head>
    <title>USPB-Repos_Jan2025 Data Visualization</title>
    <script src="https://cdn.jsdelivr.net/npm/papaparse@5.3.0/papaparse.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.11.5/css/jquery.dataTables.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.js"></script>
    <style>
        body { font-family: sans-serif; }
        .chart-container { width: 300px; height: 350px; display: inline-block; margin: 10px; vertical-align: top; position: relative; }
        .chart-container canvas { position: absolute; top: 30px; left: 0; }
        .chart-container h3 { position: absolute; top: 0; left: 0; width: 100%; text-align: center; }
        #totalEntries {margin-bottom: 20px;}
        .chart-container .chart-legend {
            position: absolute;
            top: 330px; /* Adjust as needed */
            left: 5px;
            width: 95%;
            overflow-y: auto;
            max-height: 50px; /* Adjust max height for vertical scroll */
        }
    </style>
</head>
<body>
    <h1>USPB-Repos_Jan2025 Data Visualizations</h1>

    <input type="file" id="csvFileInput" accept=".csv">

    <div id="totalEntries"></div>

    <div id="charts"></div>

    <h2>Data Table</h2>
    <table id="dataTable" class="display"></table>

    <script>
        document.getElementById('csvFileInput').addEventListener('change', function(event) {
            const file = event.target.files[0];
            if (file && file.name === 'USPB-Repos_Jan2025.csv') {
                Papa.parse(file, {
                    header: true,
                    complete: function(results) {
                        const data = results.data;
                        visualizeData(data);
                    }
                });
            } else {
                alert("Please select the correct file: USPB-Repos_Jan2025.csv");
            }
        });

        function visualizeData(data) {
            document.getElementById('totalEntries').textContent = `Total Entries: ${data.length}`;
            createCharts(data);
            createDataTable(data);
        }

        function createCharts(data) {
            const chartsDiv = document.getElementById('charts');
            const headers = Object.keys(data[0]);
            chartsDiv.innerHTML = '';

            headers.forEach(header => {
                const uniqueValues = {};
                data.forEach(row => {
                    const value = row[header] || 'Unknown';
                    uniqueValues[value] = (uniqueValues[value] || 0) + 1;
                });

                if (Object.keys(uniqueValues).length > 1 && Object.keys(uniqueValues).length < 40) {
                    const labels = Object.keys(uniqueValues);
                    const values = Object.values(uniqueValues);
                    const total = values.reduce((a, b) => a + b, 0);
                    const percentages = values.map(v => ((v / total) * 100).toFixed(1) + '%');

                    const chartContainer = document.createElement('div');
                    chartContainer.className = 'chart-container';
                    const headerElement = document.createElement('h3');
                    headerElement.textContent = header;
                    chartContainer.appendChild(headerElement);
                    const canvas = document.createElement('canvas');
                    chartContainer.appendChild(canvas);
                    chartsDiv.appendChild(chartContainer);

                    const ctx = canvas.getContext('2d');
                    const myChart = new Chart(ctx, {
                        type: 'pie',
                        data: {
                            labels: labels.map((label, index) => `${label} (${percentages[index]})`),
                            datasets: [{ data: values }]
                        },
                        options: {
                            plugins: {
                                title: {
                                    display: false,
                                }
                            },
                            legend: {
                                display: false, // Hide default legend
                            }
                        }
                    });

                    const legendDiv = document.createElement('div');
                    legendDiv.className = 'chart-legend';
                    legendDiv.innerHTML = myChart.generateLegend();
                    chartContainer.appendChild(legendDiv);
                }
            });
        }

        function createDataTable(data) {
            $(document).ready(function() {
                $('#dataTable').DataTable({
                    data: data,
                    columns: Object.keys(data[0]).map(key => ({ title: key, data: key }))
                });
            });
        }
    </script>
</body>
</html>
