<!DOCTYPE html>
<html lang="en">

<head>

<meta charset="UTF-8">

<meta name="viewport" content="width=device-width, initial-scale=1.0">

<title>ROM URL Config</title>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

</head>
<body>

<div class="container">

<div class="aui-page-header-main">

<h2>AI-ROM URL Configuration</h2>

</div>

<div>

<h4 class="current">Current URL:</h4>

<pre id="currentUrl" class="url-link">Loading...</pre>

</div>

<div class="update-group">

<input type="text" id="newUrl" class="text medium-long-field" placeholder="Enter new API URL">

<button onclick="updateUrl()" class="aui-button aui-button-primary">Update URL</button>

</div>

<div>

<h4>Select Project:</h4>

<input type="text" id="projectSearch" class="search-field" placeholder="Search projects...">

<div id="projectList" class="project-list">

</div>

<button onclick="applySelection()" class="aui-button aui-button-primary">Apply</button>

</div>

</div>

<script>

let allProjects = [];
let selectedProjects = []; 

function fetchUrl() {
  const apiurl = window.location.origin + "/jira/plugins/servlet/issuecrud?action=getUrl";

  fetch(apiurl, {
    method: 'GET',
    headers: {
      'Referer': window.location.href,
      "Content-Type": 'application/json'
    }
  })
  .then(response => {
    if (!response.ok) {
      throw new Error('HTTP error! Status: ' + response.status);
    }
    return response.json();
  })
  .then(data => {
    document.getElementById('currentUrl').textContent = data.apiurl;
    document.getElementById('currentUrl').className = "url-link";
    document.getElementById('newUrl').value = data.apiurl;
  })
  .catch(error => {
    document.getElementById('currentUrl').textContent = "Error: " + error;
    document.getElementById('currentUrl').className = "";
  });
}

function updateUrl() {
  const newUrl = document.getElementById('newUrl').value;
  const apiurl = window.location.origin + "/jira/plugins/servlet/issuecrud?action=updateUrl&url=" + newUrl;

  fetch(apiurl, {
    method: 'GET',
    headers: {
      'Referer': window.location.href
    }
  })
  .then(response => {
    if (!response.ok) {
      throw new Error('HTTP error! Status: ' + response.status);
    }
    return response.text();
  })
  .then(data => {
    document.getElementById('currentUrl').textContent = newUrl;
    document.getElementById('currentUrl').className = "url-link";
    document.getElementById('newUrl').value = newUrl;
    alert("URL updated successfully!");
  })
  .catch(error => {
    document.getElementById('currentUrl').textContent = "Error: " + error;
    document.getElementById('currentUrl').className = "";
    alert("Error: " + error);
  });
}

function fetchProjects() {
  const apiurl = window.location.origin + "/jira/plugins/servlet/issuecrud?action=getProjects";

  fetch(apiurl, {
    method: 'GET',
    headers: {
      "Referer": window.location.href,
      "Content-Type": 'text/plain'
    }
  })
  .then(response => {
    if (!response.ok) {
      throw new Error('HTTP error! Status: ' + response.status);
    }
    return response.text();
  })
  .then(data => {
    allProjects = data.split(",");
    updateProjectList(); 
  })
  .catch(error => {
    console.log("Error occurred:", error);
  });
}

function fetchSelectedProjects() {
  const apiurl = window.location.origin + "/jira/plugins/servlet/issuecrud?action=getSelectedProjects";

  fetch(apiurl, {
    method: 'GET',
    headers: {
      "Referer": window.location.href,
      "Content-Type": 'text/plain'
    }
  })
  .then(response => {
    if (!response.ok) {
      throw new Error('HTTP error! Status: ' + response.status);
    }
    return response.text();
  })
  .then(data => {
    selectedProjects = data.split(",");
    updateProjectList(); 
  })
  .catch(error => {
    console.log("Error occurred:", error);
  });
}

function updateProjectList() {
  const projectList = document.getElementById('projectList');
  projectList.innerHTML = '';

  allProjects.forEach(project => {
    const [key, name] = project.split("-");
    const label = document.createElement('label');
    const checkbox = document.createElement('input');
    checkbox.type = "checkbox";
    checkbox.value = key;

    // Check if the project is selected
    checkbox.checked = selectedProjects.includes(key); 

    label.innerHTML = checkbox.outerHTML + " " + key + " - " + name;
    projectList.appendChild(label);
    projectList.appendChild(document.createElement('br'));
  });

  // Apply search filter if it's active
  const filter = document.getElementById('projectSearch').value.toLowerCase();
  if (filter) {
    filterProjectList(filter);
  }
}

function filterProjectList(filter) {
  const projectList = document.getElementById('projectList');
  const labels = projectList.querySelectorAll('label');

  labels.forEach(label => {
    const projectName = label.textContent.toLowerCase();
    if (projectName.includes(filter)) {
      label.style.display = 'block';
    } else {
      label.style.display = 'none';
    }
  });
}

function applySelection() {
  const selectedKeys = Array.from(document.querySelectorAll('input[type="checkbox"]:checked')).map(checkbox => checkbox.value);
  const apiurl = window.location.origin + "/jira/plugins/servlet/issuecrud?action=applySelection&keys=" + selectedKeys.join(",");

  fetch(apiurl, {
    method: 'GET',
    headers: {
      "Referer": window.location.href
    }
  })
  .then(response => {
    if (!response.ok) {
      throw new Error('HTTP error! Status: ' + response.status);
    }
    return response.text();
  })
  .then(data => {
    alert('Projects applied successfully!'); 
  })
  .catch(error => {
    console.log("Error occurred:", error);
    alert("Error: " + error);
  });
}

document.addEventListener("DOMContentLoaded", fetchUrl);
document.addEventListener("DOMContentLoaded", fetchProjects);
document.addEventListener("DOMContentLoaded", fetchSelectedProjects);

document.getElementById('projectSearch').addEventListener('input', function() {
  const filter = this.value.toLowerCase();
  filterProjectList(filter);
});

</script>

</body>

</html>















<!DOCTYPE html>
<html lang="en">

<head>

<meta charset="UTF-8">

<meta name="viewport" content="width=device-width, initial-scale=1.0">

<title>ROM URL Config</title>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<style>

body {

font-family: Arial, sans-serif;

margin: 20px;

padding: 20px;

background-color: #f4f4f4;

}

.container {

max-width: 100%;

margin: 0 auto;

padding: 20px;

background-color: #fff;

border-radius: 5px;

box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);

}

.aui-page-header-main {

padding-bottom: 1px;

border-bottom: 1px solid #ddd;

color: #292959;

font-family: Georgia, serif;

}

.text.medium-long-field, search-field {

width: 100%;

padding: 8px;

box-sizing: border-box;

border: 1px solid #ccc;

border-radius: 4px;
margin-bottom: 15px;

}

.aui-button.aui-button-primary {

background-color: #0052cc;

color: #fff;

padding: 10px 15px;

border: none;

border-radius: 4px;

cursor: pointer;

}

.aui-button.aui-button-primary:hover {

background-color: #003d99;

}

.url-link {

color: #0052cc;

text-decoration: underline;

cursor: pointer;

}

.current {

font-family: Georgia, serif;

color: gray;

}

.project-list {

max-height: 200px;

overflow-y: auto;

border: 1px solid #ccc;

border-radius: 4px;

padding: 10px;

}

</style>

</head>
<body>

<div class="container">

<div class="aui-page-header-main">

<h2>AI-ROM URL Configuration</h2>

</div>

<div>

<h4 class="current">Current URL:</h4>

<pre id="currentUrl" class="url-link">Loading...</pre>

</div>

<div class="update-group">

<input type="text" id="newUrl" class="text medium-long-field" placeholder="Enter new API URL">

<button onclick="updateUrl()" class="aui-button aui-button-primary">Update URL</button>

</div>

<div>

<h4>Select Project:</h4>

<input type="text" id="projectSearch" class="search-field" placeholder="Search projects...">

<div id="projectList" class="project-list">

</div>

<button onclick="applySelection()" class="aui-button aui-button-primary">Apply</button>

</div>

</div>

<script>

let allProjects = [];
let selectedProjects = []; 

function fetchUrl() {
  const apiurl = window.location.origin + "/jira/plugins/servlet/issuecrud?action=getUrl";

  fetch(apiurl, {
    method: 'GET',
    headers: {
      'Referer': window.location.href,
      "Content-Type": 'application/json'
    }
  })
  .then(response => {
    if (!response.ok) {
      throw new Error('HTTP error! Status: ' + response.status);
    }
    return response.json();
  })
  .then(data => {
    document.getElementById('currentUrl').textContent = data.apiurl;
    document.getElementById('currentUrl').className = "url-link";
    document.getElementById('newUrl').value = data.apiurl;
  })
  .catch(error => {
    document.getElementById('currentUrl').textContent = "Error: " + error;
    document.getElementById('currentUrl').className = "";
  });
}

function updateUrl() {
  const newUrl = document.getElementById('newUrl').value;
  const apiurl = window.location.origin + "/jira/plugins/servlet/issuecrud?action=updateUrl&url=" + newUrl;

  fetch(apiurl, {
    method: 'GET',
    headers: {
      'Referer': window.location.href
    }
  })
  .then(response => {
    if (!response.ok) {
      throw new Error('HTTP error! Status: ' + response.status);
    }
    return response.text();
  })
  .then(data => {
    document.getElementById('currentUrl').textContent = newUrl;
    document.getElementById('currentUrl').className = "url-link";
    document.getElementById('newUrl').value = newUrl;
    alert("URL updated successfully!");
  })
  .catch(error => {
    document.getElementById('currentUrl').textContent = "Error: " + error;
    document.getElementById('currentUrl').className = "";
    alert("Error: " + error);
  });
}

function fetchProjects() {
  const apiurl = window.location.origin + "/jira/plugins/servlet/issuecrud?action=getProjects";

  fetch(apiurl, {
    method: 'GET',
    headers: {
      "Referer": window.location.href,
      "Content-Type": 'text/plain'
    }
  })
  .then(response => {
    if (!response.ok) {
      throw new Error('HTTP error! Status: ' + response.status);
    }
    return response.text();
  })
  .then(data => {
    allProjects = data.split(",");
    updateProjectList(); 
  })
  .catch(error => {
    console.log("Error occurred:", error);
  });
}

function fetchSelectedProjects() {
  const apiurl = window.location.origin + "/jira/plugins/servlet/issuecrud?action=getSelectedProjects";

  fetch(apiurl, {
    method: 'GET',
    headers: {
      "Referer": window.location.href,
      "Content-Type": 'text/plain'
    }
  })
  .then(response => {
    if (!response.ok) {
      throw new Error('HTTP error! Status: ' + response.status);
    }
    return response.text();
  })
  .then(data => {
    selectedProjects = data.split(",");
    updateProjectList(); 
  })
  .catch(error => {
    console.log("Error occurred:", error);
  });
}

function updateProjectList() {
  const projectList = document.getElementById('projectList');
  projectList.innerHTML = '';

  allProjects.forEach(project => {
    const [key, name] = project.split("-");
    const label = document.createElement('label');
    const checkbox = document.createElement('input');
    checkbox.type = "checkbox";
    checkbox.value = key;

    // Check if the project is selected
    checkbox.checked = selectedProjects.includes(key); 

    label.innerHTML = checkbox.outerHTML + " " + key + " - " + name;
    projectList.appendChild(label);
    projectList.appendChild(document.createElement('br'));
  });

  // Apply search filter if it's active
  const filter = document.getElementById('projectSearch').value.toLowerCase();
  if (filter) {
    filterProjectList(filter);
  }
}

function filterProjectList(filter) {
  const projectList = document.getElementById('projectList');
  const labels = projectList.querySelectorAll('label');

  labels.forEach(label => {
    const projectName = label.textContent.toLowerCase();
    if (projectName.includes(filter)) {
      label.style.display = 'block';
    } else {
      label.style.display = 'none';
    }
  });
}

function applySelection() {
  const selectedKeys = Array.from(document.querySelectorAll('input[type="checkbox"]:checked')).map(checkbox => checkbox.value);
  const apiurl = window.location.origin + "/jira/plugins/servlet/issuecrud?action=applySelection&keys=" + selectedKeys.join(",");

  fetch(apiurl, {
    method: 'GET',
    headers: {
      "Referer": window.location.href
    }
  })
