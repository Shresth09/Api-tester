Certainly! Here's a complete example of how to create a Jira plugin that adds a button to the issue page. When clicked, this button fetches the issue description and sends it to an API endpoint, then displays the response in a popup.

First, ensure you have the Atlassian Plugin SDK installed. Then, you can use the following files and code snippets as a guideline for your plugin.

1. **atlassian-plugin.xml** - Define your plugin module:

```xml
<atlassian-plugin key="my-jira-plugin" name="My Jira Plugin" pluginsVersion="2">
    <plugin-info>
        <description>A plugin that fetches issue descriptions and sends them to an API.</description>
        <version>1.0</version>
        <vendor name="Your Company" url="http://example.com"/>
    </plugin-info>

    <web-resource key="my-jira-plugin-resources" name="My Jira Plugin Web Resources">
        <dependency>com.atlassian.auiplugin:ajs</dependency>
        <resource type="download" name="my-jira-plugin.js" location="/js/my-jira-plugin.js"/>
    </web-resource>

    <web-panel key="my-jira-plugin-panel" location="atl.jira.view.issue.right.context" weight="100">
        <resource type="velocity" name="my-jira-plugin-panel" location="templates/my-jira-plugin-panel.vm"/>
    </web-panel>
</atlassian-plugin>
```

2. **templates/my-jira-plugin-panel.vm** - Create a Velocity template for the button:

```html
<div id="my-jira-plugin-container">
    <button id="fetch-description-btn" class="aui-button aui-button-primary">Send Description</button>
</div>
```

3. **src/main/resources/js/my-jira-plugin.js** - Add your JavaScript logic:

```javascript
AJS.$(document).ready(function() {
    AJS.$("#fetch-description-btn").click(function() {
        // Fetch the issue description
        var issueId = JIRA.Issue.getIssueId();
        var issueKey = JIRA.Issue.getIssueKey();
        var issueDescription = JIRA.Issue.getFieldText("description");

        // Prepare the JSON payload
        var payload = JSON.stringify({
            "user_story": issueDescription
        });

        // Send the payload to the API endpoint
        AJS.$.ajax({
            url: 'https://your-api-endpoint.com/endpoint',
            type: 'POST',
            data: payload,
            contentType: 'application/json',
            success: function(response) {
                // Display the response in a popup
                alert("Response from API: " + response);
            },
            error: function(xhr, status, error) {
                // Handle errors
                alert("Failed to send the request: " + error);
            }
        });
    });
});
```

4. **pom.xml** - Make sure your `pom.xml` includes the necessary dependencies:

```xml
<dependencies>
    <dependency>
        <groupId>com.atlassian.plugin</groupId>
        <artifactId>atlassian-spring</artifactId>
        <version>2.0.0</version>
    </dependency>
    <dependency>
        <groupId>com.atlassian.plugins</groupId>
        <artifactId>atlassian-plugins-webresource-api</artifactId>
        <version>2.12.0</version>
    </dependency>
</dependencies>
```

After creating these files and configuring them as shown, package your plugin using the Atlassian Plugin SDK commands and install it on your Jira instance.

Let me know if you need further assistance or additional features!