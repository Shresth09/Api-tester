Great to hear that the listener is working and printing the issue key! It sounds like the issue might be related to the way the modal is being triggered. Let's troubleshoot and refine the process to ensure the modal appears.

First, let's ensure that the JavaScript code for displaying the modal is correctly set up in `onload-popup.vm`. The key part is to ensure that the modal is being triggered correctly using jQuery and AUI Dialog.

Hereâ€™s the revised version of the JavaScript code in `onload-popup.vm` to make sure the modal is displayed:

**`onload-popup.vm`**
```velocity
#set($allowedProjectKeys = ["GCJDT", "LT", "NEW"])
#if ($allowedProjectKeys.contains($project.key))

<script type="text/javascript">
AJS.toInit(function() {
    function showPopup(issueKey) {
        if (!issueKey) {
            console.log("Issue key not found.");
            AJS.$("#api-response").html("<p style='color: red; font-weight: bold;'>Issue key not found.</p>");
            AJS.dialog2("#api-modal").show();
            return;
        }

        var jiraApiUrl = AJS.params.baseURL + "/rest/api/2/issue/" + issueKey;
        console.log("Fetching data from Jira API:", jiraApiUrl);

        jQuery.ajax({
            url: jiraApiUrl,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                console.log("Jira API response received:", response);
                var description = response.fields.description;
                if (!description) {
                    console.log("Description not provided in the issue.");
                    AJS.$("#api-response").html("<p style='color: red; font-weight: bold;'>Description is not provided in the issue.</p>");
                    AJS.dialog2("#api-modal").show();
                    return;
                }

                var servletApiUrl = AJS.params.baseURL + "/plugins/servlet/issuecrud?action=getUrl";
                console.log("Fetching data from SERVLET API:", servletApiUrl);

                jQuery.ajax({
                    url: servletApiUrl,
                    type: 'GET',
                    contentType: 'application/json',
                    success: function(response) {
                        var serverApiUrl = response.apiUrl;
                        console.log("Fetched URL from servlet:", serverApiUrl);

                        var payload = JSON.stringify({ user_story: description });
                        var apiUrl = serverApiUrl;
                        console.log("Sending data to external API:", apiUrl, payload);

                        AJS.$("#api-modal").show();
                        AJS.$("#api-response").html("<pre>Loading data...</pre>");

                        jQuery.ajax({
                            url: apiUrl,
                            type: "POST",
                            contentType: 'application/json',
                            data: payload,
                            success: function(apiResponse) {
                                console.log("External API response received:", apiResponse);
                                var cscore = apiResponse.NA.cscore;
                                var messages = apiResponse.NA.message;
                                var formattedData = "<p style='font-size: 1.2em;'><strong>SCORE:</strong> " + cscore + "</p>"
                                    + "<p style='font-size: 1.2em;'><strong>MESSAGE:</strong> " + messages.join("<br>") + "</p>";
                                AJS.$("#api-response").html(formattedData);
                                AJS.dialog2("#api-modal").show();
                            },
                            error: function(xhr, status, error) {
                                console.log("Error in external API call:", status, error);
                                AJS.$("#api-response").html("<p style='color: red;'>Failed to fetch data. Verify the ROM URL in Configuration. Status:" + xhr.status + ", Error: " + error + "</p>");
                                AJS.dialog2("#api-modal").show();
                            }
                        });
                    },
                    error: function(xhr, status, error) {
                        console.log("Error in servlet API call:", status, error);
                        AJS.$("#api-response").html("<p style='color: red;'>Failed to fetch ROM API from servlet. Status:" + xhr.status + ", Error: " + error + "</p>");
                        AJS.dialog2("#api-modal").show();
                    }
                });
            },
            error: function(xhr, status, error) {
                console.log("Error in Jira API call:", status, error);
                AJS.$("#api-response").html("<p style='color: red;'>Failed to fetch Jira issue data. Status:" + xhr.status + ", Error: " + error + "</p>");
                AJS.dialog2("#api-modal").show();
            }
        });
    }

    // Get the issue key from the session storage
    var issueKey = sessionStorage.getItem('issueKey');
    if (issueKey) {
        console.log("Showing popup for issue key:", issueKey);
        showPopup(issueKey);
        sessionStorage.removeItem('issueKey'); // Clean up the session storage
    }
});
</script>

<!-- Modal Structure -->
<div id="api-modal" class="aui-dialog2 aui-dialog2-medium" role="dialog" aria-hidden="true" style="display:none;">
    <header class="aui-dialog2-header">
        <h2 class="aui-dialog2-header-main">RQM Description Analysis</h2>
        <a class="aui-dialog2-header-close">
            <span class="aui-icon aui-icon-small aui-iconfont-close-dialog">Close</span>
        </a>
    </header>
    <div class="aui-dialog2-content">
        <div id="api-response">Loading data...</div>
    </div>
    <footer class="aui-dialog2-footer">
        <div class="aui-dialog2-footer-actions">
            <button id="close-button" class="aui-button aui-button-primary">Close</button>
        </div>
    </footer>
</div>
#end
```

### Step 4: Ensure the Issue Key is Stored in Session

Modify the `IssueCreatedListener` to store the issue key in session storage:

**`IssueCreatedListener.java`**
```java
package com.citi.cate.stash.listeners;

import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.event.issue.IssueEvent;
import com.atlassian.jira.event.issue.IssueEventListener;
import com.atlassian.jira.event.type.EventType;
import com.atlassian.jira.issue.Issue;
import org.springframework.stereotype.Component;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

@Component
public class IssueCreatedListener implements IssueEventListener {

    @EventListener
    public void onIssueEvent(IssueEvent issueEvent) {
        if (issueEvent.getEventTypeId().equals(EventType.ISSUE_CREATED_ID)) {
            Issue issue = issueEvent.getIssue();
            System.out.println("Issue Created: " + issueEvent.getIssue().getKey());

            HttpServletRequest request = ComponentAccessor.getComponent(HttpServletRequest.class);
            System.out.println("Request: " + request.toString());

            HttpSession session = request.getSession();
            session.setAttribute("issueKey", issue.getKey());
            System.out.println("Session: " + session.toString());

            // Store the issue key in session storage for the client-side JavaScript
            request.getSession().setAttribute("issueKey", issue.getKey());
        }
    }

    @Override
    public void start() {}

    @Override
    public void stop() {}
}
```

This setup ensures that when a new issue is created, the issue key is stored in session storage and the client-side JavaScript retrieves it to display the modal.

Let me know if this works for you or if there's anything else you'd like to adjust![43dcd9a7-70db-4a1f-b0ae-981daa162054](https://github.com/karthikseetharam/personalportal/tree/49552918652aa6d033d682016f75b818674a2a70/images%2FPull%20Request%20%23519_%20AWSA-2109%20Add%20device%20model%20script%20to%20standalone%20script%20executor.%20-%20Bitbucket_files%2Fbatch%282%29.js?citationMarker=43dcd9a7-70db-4a1f-b0ae-981daa162054 "1")[43dcd9a7-70db-4a1f-b0ae-981daa162054](https://github.com/cmpaxgg/Lab3/tree/48558f7f71245b46bca6ba1fcb33c4921badab6d/img%2FCreate%20Issue%20-%20Jira_files%2Fbatch%282%29.js?citationMarker=43dcd9a7-70db-4a1f-b0ae-981daa162054 "2")[43dcd9a7-70db-4a1f-b0ae-981daa162054](https://github.com/andmikey/andmikey.github.io/tree/a09f5641b6f7f3c6105e34089762fe9087ae0e00/Coursework_files%2Fbatch.js?citationMarker=43dcd9a7-70db-4a1f-b0ae-981daa162054 "3")