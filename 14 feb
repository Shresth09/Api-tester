 function initStuff() {

        // Description blur event handler
        AJS.$("#description").blur(function() {
            var descriptionText = AJS.$("#description").val();
            if (descriptionText.trim() !== "") {
                alert("Description: " + descriptionText);
            }
        });




 // Description blur event handler (modified)
        AJS.$("#description").blur(function() {
            var descriptionText = AJS.$("#description").val();
            if (descriptionText.trim() !== "") {
                AJS.$("#api-response").html("<p>" + descriptionText + "</p>"); // Set description text in modal
                AJS.dialog2("#api-modal").show(); // Show the modal
            }
        });



 // Description blur event handler (modified)
        AJS.$("#description").blur(function() {
            var descriptionText = AJS.$("#description").val();
            if (descriptionText.trim() !== "") {
                var payload = JSON.stringify({
                    user_story: descriptionText
                });
                var apiUrl = '$rqmUrl';

                AJS.$("#api-response").html("<pre>Loading data...</pre>"); // Show loading message
                AJS.dialog2("#api-modal").show(); // Show the modal immediately

                jQuery.ajax({
                    url: apiUrl,
                    type: 'POST',
                    contentType: 'application/json',
                    data: payload,
                    success: function(apiResponse) {
                        console.log("External API response received:", apiResponse);
                        var cscore = apiResponse.NA.cscore;
                        var messages = apiResponse.NA.message;

                        var formattedData =
                            "<p style='font-size: 1.2em; font: Citi-Sans-Text-Regular;'> <strong>Description Score:</strong> " + cscore + "</p>" +
                            "<p style='font-size: 1.2em; font: Citi-Sans-Text-Regular;'> <strong>Action Required:</strong> " + messages.join("<br>") + "</p>";

                        AJS.$("#api-response").html(formattedData); // Set formatted data in modal

                        var issueKey = getIssueKey();
                        var customFieldId = '$scoreFieldKey';
                        updateCustomFieldValue(issueKey, customFieldId, cscore);
                        setEntityProperty(issueKey, cscore);

                        if (cscore != null) {
                            AJS.$("#score-value").text(cscore);
                        }
                    },
                    error: function(xhr, status, error) {
                        console.log("Error in external API call:", status, error);
                        AJS.$("#api-response").html("<p style='color: red ; font: Citi-Sans-Text-Regular;' > Error: Failed to fetch data. Please verify Configured Endpoint Status: " + xhr.status + "</p>");
                    }
                });
            }
        });







<script type="text/javascript">
AJS.toInit(function() {
    // Function to attach the event listener to the Description field
    function attachDescriptionListener() {
        // Ensure the dialog and the editor are fully loaded
        setTimeout(function() {
            // Get the TinyMCE editor instance for the Description field
            var editor = tinymce.get('description');
            if (editor) {
                // Avoid attaching multiple event listeners
                if (!editor.eventsAttached) {
                    editor.on('blur', function() {
                        // Get the plain text content from the editor
                        var descriptionText = editor.getContent({ format: 'text' });
                        alert("Description:\n" + descriptionText);
                    });
                    editor.eventsAttached = true;
                }
            } else {
                // Fallback in case TinyMCE editor is not available
                var $descriptionField = AJS.$("#description");
                if ($descriptionField.length && !$descriptionField.data('events-attached')) {
                    $descriptionField.on('blur', function() {
                        var descriptionText = $descriptionField.val();
                        alert("Description:\n" + descriptionText);
                    });
                    $descriptionField.data('events-attached', true);
                }
            }
        }, 500); // Adjust the timeout as needed to allow the editor to initialize
    }

    // Listen for the dialog to be opened
    AJS.$(document).on('dialogContentReady', function(e, dialog) {
        // Check if the Create Issue dialog is opened
        if (dialog.$popup && dialog.$popup.attr('id') === 'create-issue-dialog') {
            attachDescriptionListener();
        }
    });

    // Also, check if the page is in Create Issue mode (full page)
    if (AJS.$('#create-issue-dialog').length === 0 && AJS.$('#create-issue-submit').length > 0) {
        attachDescriptionListener();
    }
});
</script>