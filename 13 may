Great extension, Shresth. If you’d like to shape the error response in that format—where the key is the error message (e.g. `"Project Not Found"`) and its value is an empty string—you can define and populate it like this:

---

### ✅ Updated Error Response Structure

```java
List<Map<String, String>> errorResponse = new ArrayList<>();

{
    Map<String, String> errorMap = new LinkedHashMap<>();
    errorMap.put("Project Not Found", "");
    errorResponse.add(errorMap);
}
```

---

### 🧾 API Wrapper Response Example

Your final JSON output will look like:

```json
{
  "jiraErrorResponse": [
    {
      "Project Not Found": ""
    }
  ]
}
```

To send this in your controller using `ObjectNode`, you’d adapt the response builder like this:

```java
public ResponseEntity<ObjectNode> buildApiResponse(List<Map<String, String>> finalResponse,
                                                   List<Map<String, String>> errorResponse) {
    ObjectMapper mapper = new ObjectMapper();
    ObjectNode responseNode = mapper.createObjectNode();

    if (finalResponse != null && !finalResponse.isEmpty()) {
        responseNode.set("jiraSuccessResponse", mapper.valueToTree(finalResponse));
        return ResponseEntity.ok(responseNode);
    } else {
        responseNode.set("jiraErrorResponse", mapper.valueToTree(errorResponse));
        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseNode);
    }
}
```

It’s super flexible—feel free to change the error key dynamically depending on the situation (e.g., “Invalid Token”, “Permission Denied”, etc.) and we’ll slot it in the same way.

Want a central utility to generate these error maps for various cases? I can write one that plugs right in.