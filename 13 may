public void processTaInput(JiraRequestBody requestBody, String jiraToken, String jiraNamBaseUrl) {
    List<Map<String, String>> resultList = new ArrayList<>();

    for (TaInput ta : requestBody.getTaInput()) {
        Map<String, String> taDataMap = new HashMap<>();
        taDataMap.put("planviewID", ta.getPlanviewID());
        taDataMap.put("asa_approval_date", ta.getAsaApprovalDate());
        taDataMap.put("architect_soeid", ta.getArchitectSoeid());
        taDataMap.put("asa_override_request_date", ta.getAsaOverrideRequestDate());
        taDataMap.put("asa_override_decision_date", ta.getAsaOverrideDecisionDate());
        taDataMap.put("asa_override_appr_soeid", ta.getAsaOverrideApprSoeid());
        taDataMap.put("asa_architectural_significance", ta.getAsaArchitecturalSignificance());
        taDataMap.put("asa_status", ta.getAsaStatus());

        // Construct JQL query
        String planviewID = ta.getPlanviewID();
        String jql = "\"Planview ID\" ~ " + planviewID + " and issuetype = Planview";

        HttpHeaders headers = new HttpHeaders();
        headers.set("Authorization", "Bearer " + jiraToken);
        headers.set("Accept", MediaType.APPLICATION_JSON_VALUE);

        HttpEntity<String> entity = new HttpEntity<>(headers);

        String urlToSend = UriComponentsBuilder.fromHttpUrl(jiraNamBaseUrl)
            .path("/rest/api/latest/search")
            .queryParam("jql", jql)
            .queryParam("expand", "names")
            .build()
            .toUriString();

        try {
            ResponseEntity<JsonNode> response = restTemplate.exchange(
                urlToSend, HttpMethod.GET, entity, JsonNode.class);

            // TODO: Pass response and taDataMap to another method
            handleJiraResponse(response.getBody(), taDataMap);

        } catch (RestClientException e) {
            // Log or handle error
            System.err.println("JIRA request failed for planviewID: " + planviewID);
        }

        resultList.add(taDataMap);
    }
}