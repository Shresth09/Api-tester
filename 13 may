public void processAndUpdateIssues(JsonNode jqlResponse,
                                   Map<String, String> filteredMap,
                                   Map<String, String> customFieldMap) {

    // Step 1: Map filtered data to field IDs
    Map<String, String> valueMap = mapToCustomFieldIds(filteredMap, customFieldMap);

    JsonNode issues = jqlResponse.path("issues");
    if (issues.isArray()) {
        for (JsonNode issueNode : issues) {
            String issueKey = issueNode.path("key").asText("");

            if (!issueKey.isBlank()) {
                boolean isSuccess = updateJiraIssue(issueKey, valueMap, customFieldMap);
                System.out.println(issueKey + " → " + (isSuccess ? "✅ Success" : "❌ Failed"));
            }
        }
    } else {
        System.err.println("No issues found in JQL response.");
    }
}






public boolean updateJiraIssue(String issueKey,
                               Map<String, String> valueMap,
                               Map<String, String> customFieldMap) {
    ObjectMapper mapper = new ObjectMapper();

    // Special fields requiring array/object formatting
    String archSignificanceId = customFieldMap.get("ASA: Architectural Significance");
    String statusId = customFieldMap.get("ASA: Status");

    ObjectNode fieldsNode = mapper.createObjectNode();

    for (Map.Entry<String, String> entry : valueMap.entrySet()) {
        String fieldId = entry.getKey();
        String value = entry.getValue();

        if (fieldId.equals(archSignificanceId)) {
            ObjectNode option = mapper.createObjectNode();
            option.put("value", value);

            ArrayNode wrappedOption = mapper.createArrayNode();
            wrappedOption.add(option);

            fieldsNode.set(fieldId, wrappedOption);

        } else if (fieldId.equals(statusId)) {
            ArrayNode statusArray = mapper.createArrayNode();
            statusArray.add(value);
            fieldsNode.set(fieldId, statusArray);

        } else {
            fieldsNode.put(fieldId, value);
        }
    }

    ObjectNode updatePayload = mapper.createObjectNode();
    updatePayload.set("fields", fieldsNode);

    HttpHeaders headers = new HttpHeaders();
    headers.set("Authorization", "Bearer " + JIRA_AUTH_TOKEN); // global variable
    headers.set("Accept", MediaType.APPLICATION_JSON_VALUE);
    headers.set("Content-Type", MediaType.APPLICATION_JSON_VALUE);

    try {
        HttpEntity<String> requestEntity = new HttpEntity<>(mapper.writeValueAsString(updatePayload), headers);
        String updateUrl = JIRA_BASE_URL + "/rest/api/latest/issue/" + issueKey;

        restTemplate.exchange(updateUrl, HttpMethod.PUT, requestEntity, Void.class);
        System.out.println("✅ Issue updated: " + issueKey);
        return true;

    } catch (Exception e) {
        System.err.println("❌ Failed to update issue " + issueKey + ": " + e.getMessage());
        return false;
    }
}