<!DOCTYPE html>

<html lang="en">

<head>

<meta charset="UTF-8">

<meta name="viewport" content="width=device-width, initial-scale=1.0">

<title>RQM URL Config</title>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>

<body>

<div class="container">

<div class="aui-page-header-main">

AI-ROM URL Configuration

</div>

<!-- Currnt URL setted for RQM -->

<div>

<div class="current-beta">Current url:</div>

<pre id="currentUrl" class="url-link">Loading...</pre>

</div>

<!-- update call for RQM url on click of update url button -->

<div class="update-group">

<input type="text" id="newUrl" class="text medium-long-field" placeholder="Enter new API URL">

<button onclick="updateUrl()" class="aui-button aui-button-primary">Update URL</button>

</div>

<br>

<hr>

<div>

my-custom-flag is

PopupContextProvider

<div class="current-beta">Select Projects:</div>

<!-- List off all the project adjusted by selected projects methods-->

<input type="text" id="projectSearch" class="search-field" placeholder="Search projects...">

<div id="projectList" class="project-list"></div>

<div>

<br>

<button onclick="applySelection()" class="aui-button aui-button-primary">Apply</button>

<label class="selectclass"><input type="checkbox" id="selectAll" onclick="selectAllProjects(this)"> Select All</label>

</ div>

</div>
</div>
<script>

let allProjects = [];

let selectedProjects = [];

// Fetching the current url setted for the rom

function fetchUrl() {

const apiurl= window.location.origin+ "/jira/plugins/servlet/issuecrud?action=getUrl";

fetch(apiurl, {

method: 'GET',

headers: {

"Referer": window.location.href,

"Content-Type": 'application/json'

}

})

then (response => {

if (!response.ok) {

throw new Error('HTTP error! Status: response.status);

} return response.json();
}) 
then(data => {

document.getElementById('currentUrl').textContent data.apiurl; document.getElementById('currentUrl').className = "url-link";

document.getElementById('newUrl').value = data.apiurl;

})

.catch(error => {

document.getElementById('currentUrl').textContent = "Error: " + error; document.getElementById('currentUrl').className = "";

});

}
// Fetching the current url setted for the ram

function updateUrl() {

const newUrl document.getElementById('newUrl').value;

const apiurl = window.location.origin + "/jira/plugins/servlet/issuecrud?action=updateUrl&url=" + newUrl;

fetch(apiurl, {

method: 'GET',

headers: { 'Referer': window.location.href

}

) } then(response => {

if (!response.ok) {

throw new Error('HTTP error! Status: response.status);

} return response.text();

})

then(data => {

document.getElementById('currentUrl').textContent = newUrl;

document.getElementById('currentUrl').className = "url-link";

document.getElementById('newUrl').value = newUrl;

alert("URL updated successfully!");

.catch(error => {

}) document.getElementById('currentUrl').textContent = "Error: " + error; document.getElementById('currentUrl').className = ""; alert("Error: " + error);

});
} 
// Fetching all the projects available in the current jira env

function fetchProjects() {

const apiurl= window.location.origin + "/jira/plugins/servlet/issuecrud?action=getProjects";

fetch(apiurl, {

method: 'GET',

headers: {

"Referer": window.location.href, "Content-Type": 'text/plain'

}
}) 
. then (response => {

if (!response.ok) {

throw new Error('HTTP error! Status: response.status);

} return response.text();

})

then(data => {

allProjects data.split(",");

// calling the update project list to set the projects as selected which are saved by the admin updateProjectList();

})

.catch(error => {

console.log("Error Fetching Projects: ", error);

});

}
// Fetching the saved list of project keys from servlet

function fetchSelected Projects() {

â–¼

issuecrud-page.vm

popup.vm

my-custom-flag.js

Pop

const apiurl= window.location.origin + "/jira/plugins/servlet/issuecrud?action=getSelectedProjects";

fetch(apiurl, {

})

method: 'GET',

headers: {

}

"Referer": window.location.href,

"Content-Type": 'text/plain'

.then(response => {

})

if (!response.ok) {

}

throw new Error('HTTP error! Status: response.status);

return response.text();

then(data => { selected Projects data.split(",");

})

updateProjectList();

.catch(error => {

console.log("Error Fetching Selected Projects: ", error);

});

}
// maintaining the list of all selected projects throughout the use search bar function updateProjectList(filteredProjects = []) {

const projectList = document.getElementById('projectList');

projectList.innerHTML = '';

const projectsToDisplay filtered Projects.length? filteredProjects allProjects;

projectsToDisplay.forEach(project => {

const [key, name] = project.split("-");

const label document.createElement('label');

const checkbox document.createElement('input');

checkbox.type = "checkbox";

checkbox.value = key;

// Check if the project is selected if (selectedProjects.includes (key)) {

checkbox.checked = true;

}

// event listner to set the projct key value is checked or not by true and false

checkbox.addEventListener('change', function() {

if (this.checked) {

if (!selectedProjects.includes (this.value)) { selected Projects.push(this.value);

}

} else {

const index = selectedProjects.indexOf(this.value);

if (index > -1) {

selected Projects.splice(index, 1);

}}}) ;
label.appendChild(checkbox);

label.appendChild(document.createTextNode(""+key+" "+ name)); projectList.appendChild(label);

projectList.appendChild(document.createElement('br'));

});
} 
//filtering the list of all the projects by the key entered in search bar on every character entered function filterProjectList (filter) {

const filteredProjects allProjects.filter(project => project.toLowerCase().includes (filter));

updateProjectList (filteredProjects);

if (filteredProjects.length === 0) {

document.getElementById('projectList').innerHTML = '<p style="color: red; font-weight: bold;">No projects found</p>'; }

}

// sends the list of all selected project keys as a string comma seprated

function applySelection() {

const apiurl = window.location.origin + "/jira/plugins/servlet/issuecrud?action=applySelection&keys=" + selected Projects.join(",");

fetch(apiurl, {

method: 'GET',

headers: {

"Referer": window.location.href
}

})

then (response => {

if (!response.ok) {

throw new Error('Applying Selected Project Keys Status: response.status); +

}

return response.text();

})

then(data => { alert('Projects applied successfully!'); loadPopupContent()

})

.catch(error => {

console.log("Error Applying Selection: ", error); alert("Error: + error);

});} 
// select all the project at once making the value of checkbox.checked to true or false at once function selectAllProjects (source) {

const checkboxes document.querySelectorAll('input[type="checkbox"]'); checkboxes.forEach(checkbox => (

if (checkbox !== source) {

checkbox.checked source.checked;

// Update selectedProjects based on the "Select All" checkbox

if (source.checked) ( if (!selected Projects.includes(checkbox.value)) { selected Projects.push(checkbox.value);
}

} else {

const index selectedProjects.indexOf(checkbox.value);

if (index > -1) {

selected Projects.splice(index, 1);

}

}
} 
});

}

document.addEventListener("DOMContentLoaded", function() {

// method call to load content on page loadong

fetchUrl();

fetchProjects();

fetchSelectedProjects();
document.getElementById('projectSearch').addEventListener('input', function() {

const filter this.value.toLowerCase();

filterProjectList(filter);

});

});

</script>

</body>

</html>