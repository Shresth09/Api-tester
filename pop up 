#set($allowedProjectKeys = [])
## Fetch the allowed project keys from the servlet
#set($apiUrl = $request.getContextPath() + "/plugins/servlet/issuecrud?action=getSelectedProjects")
#set($jsonResponse = $action.remote($apiUrl))
#set($allowedProjectKeys = $jsonResponse.split(","))

<div id="plugin-container" style="display: none;">
  <div id="popup-container">
  #if($allowedProjectKeys.contains($project.key))
    <a id="show-popup" class="aui-button">AI-RQM Analysis</a>

    <!-- Modal Structure -->
    <div id="api-modal" class="aui-dialog2 aui-dialog2-medium" role="dialog" aria-hidden="true" style="display:none;">
      <header class="aui-dialog2-header">
        <h2 class="aui-dialog2-header-main">RQM Description Analysis</h2>
        <a class="aui-dialog2-header-close">
          <span class="aui-icon aui-icon-small aui-iconfont-close-dialog">Close</span>
        </a>
      </header>
      <div class="aui-dialog2-content">
        <div id="api-response">Loading data...</div>
      </div>
      <footer class="aui-dialog2-footer">
        <div class="aui-dialog2-footer-actions">
          <button id="close-button" class="aui-button aui-button-primary">Close</button>
        </div>
      </footer>
    </div>
  #else
  #end
  </div>
</div>

<script type="module">
  AJS.toInit(function() {
    jQuery(document).ready(function() {
      initStuff();
    });
  });
</script>

<script type="text/javascript">
  function initStuff() {
    if (AJS.$("#show-popup").length && !AJS.$("#show-popup").data('events-attached')) {
      // Function to extract the issue key
      function getIssueKey() {
        console.log("Extracting issue key...");
        var url = window.location.href;
        var issueKeyPattern = /browse\/([A-Z]+-\d+)/;
        var match = url.match(issueKeyPattern);
        if (match) {
          return match[1];
        }
        var issueKeyElement = AJS.$("#key-val");
        if (issueKeyElement.length) {
          return issueKeyElement.text().trim();
        }
        var selectedIssueKey = AJS.$(".selected-issue-key").text();
        if (selectedIssueKey) {
          return selectedIssueKey.trim();
        }
        return null;
      }

      // Show the modal and fetch API data on button click
      AJS.$("#show-popup").click(function() {
        console.log("Button clicked!");
        var issuekey = getIssueKey();
        if (!issuekey) {
          console.log("Issue key not found.");
          AJS.$("#api-response").html("<p style='color: red; font-weight: bold;'> Issue key not found. </p>");
          AJS.dialog2("#api-modal").show();
          return;
        }

        var jiraApiUrl = AJS.params.baseURL + "/rest/api/2/issue/" + issuekey;
        console.log("Fetching data from Jira API:", jiraApiUrl);

        // Fetch the issue description from Jira
        jQuery.ajax({
          url: jiraApiUrl,
          type: 'GET',
          dataType: 'json',
          success: function(response) {
            console.log("Jira API response received:", response);
            var description = response.fields.description;
            if (!description) {
              console.log("Description not provided in the issue.");
              AJS.$("#api-response").html("<p style='color: red; font-weight: bold;'>














#set($allowedProjectKeys = [])

## Log statement for API URL
#set($apiUrl = $request.getContextPath() + "/plugins/servlet/issuecrud?action=getSelectedProjects")
#set($dummy = $log.debug("API URL: $apiUrl"))

## Fetch the allowed project keys from the servlet
#set($jsonResponse = $action.remote($apiUrl))
#set($dummy = $log.debug("JSON Response: $jsonResponse"))

## Split the JSON response to get the allowed project keys
#set($allowedProjectKeys = $jsonResponse.split(","))
#set($dummy = $log.debug("Allowed Project Keys: $allowedProjectKeys"))

<div id="plugin-container" style="display: none;">
  <div id="popup-container">
  #if($allowedProjectKeys.contains($project.key))
    <a id="show-popup" class="aui-button">AI-RQM Analysis</a>

    <!-- Modal Structure -->
    <div id="api-modal" class="aui-dialog2 aui-dialog2-medium" role="dialog" aria-hidden="true" style="display:none;">
      <header class="aui-dialog2-header">
        <h2 class="aui-dialog2-header-main">RQM Description Analysis</h2>
        <a class="aui-dialog2-header-close">
          <span class="aui-icon aui-icon-small aui-iconfont-close-dialog">Close</span>
        </a>
      </header>
      <div class="aui-dialog2-content">
        <div id="api-response">Loading data...</div>
      </div>
      <footer class="aui-dialog2-footer">
        <div class="aui-dialog2-footer-actions">
          <button id="close-button" class="aui-button aui-button-primary">Close</button>
        </div>
      </footer>
    </div>
  #else
  #end
  </div>
</div>

<script type="module">
  AJS.toInit(function() {
    jQuery(document).ready(function() {
      initStuff();
    });
  });
</script>

<script type="text/javascript">
  function initStuff() {
    if (AJS.$("#show-popup").length && !AJS.$("#show-popup").data('events-attached')) {
      // Function to extract the issue key
      function getIssueKey() {
        console.log("Extracting issue key...");
        var url = window.location.href;
        var issueKeyPattern = /browse\/([A-Z]+-\d+)/;
        var match = url.match(issueKeyPattern);
        if (match) {
          return match[1];
        }
        var issueKeyElement = AJS.$("#key-val");
        if (issueKeyElement.length) {
          return issueKeyElement.text().trim();
        }
        var selectedIssueKey = AJS.$(".selected-issue-key").text();
        if (selectedIssueKey) {
          return selectedIssueKey.trim();
        }
        return null;
      }

      // Show the modal and fetch API data on button click
      AJS.$("#show-popup").click(function() {
        console.log("Button clicked!");
        var issuekey = getIssueKey();
        if (!issuekey) {
          console.log("Issue key not found.");
          AJS.$("#api-response").html("<p style='color: red; font-weight: bold;'> Issue key not found. </p>");
          AJS.dialog2("#api-modal").show();
          return;
        }

        var jiraApiUrl = AJS.params.baseURL + "/rest/api/2/issue/" + issuekey;
        console.log("Fetching data from Jira API:", jiraApiUrl);

        // Fetch the issue description from Jira
        jQuery.ajax({
          url: jiraApiUrl,
          type: 'GET',
          dataType: 'json',
          success: function(response) {
            console.log("Jira API response received:", response);
            var description = response.fields.description;
            if (!description) {
              console.log("Description not provided in the issue.");
              AJS.$("#api-response").html("<p style='color: red; font-weight: bold;'>Description is not provided in the issue.</p>");
              AJS.dialog2("#api-modal").show();
              return;
            }
            var servletApiUrl = AJS.params.baseURL + "/plugins/servlet/issuecrud?action=getUrl";
            console.log("Fetching data from SERVLET API:", servletApiUrl);

            jQuery.ajax({
              url: servletApiUrl,
              type: 'GET',
              contentType: 'application/json',
              success: function(response) {
                var serverApiUrl = response.apiurl; // Ensure the correct field name
                console.log("Fetched URL from servlet:", serverApiUrl);
                var payload = JSON.stringify({user_story: description});
                var apiUrl = serverApiUrl;
                console.log("Sending data to external API:", apiUrl, payload);
                AJS.$("#api-modal").show();
                AJS.$("#api-response").html("<pre>Loading data...</pre>");

                jQuery.ajax({
                  url: apiUrl,
                  type: "POST",
                  contentType: 'application/json',
                  data: payload,
                  success: function(apiResponse) {
                    console.log("External API response received:", apiResponse);
                    var cscore = apiResponse.NA.cscore;
                    var messages = apiResponse.NA.message;
                    var formattedData = "<p style='font-size: 1.2em;'><strong>SCORE:</strong> " + cscore + "</p>" + "<p style='font-size: 1.2em;'><strong>MESSAGE:</strong>" + messages.join("<br>") + "</p>";
                    AJS.$("#api-response").html(formattedData);
                    AJS.dialog2("#api-modal").show();
                  },
                  error: function(xhr, status, error) {
                    console.log("Error in external API call:", status, error);
                    AJS.$("#api-response").html("<p style='color: red;'>Failed to fetch data. Verify the ROM URL in Configuration. Status: " + xhr.status + ", Error: " + error + "</p>");
                    AJS.dialog2("#api-modal").show();
                  }
                });
              },
              error: function(xhr, status, error) {
                console.log("Error in servlet API call:", status, error);
                AJS.$("#api-response").html("<p style='color: red;'>Failed to fetch ROM API from servlet. Status: " + xhr.status + ", Error: " + error + "</p>");
                AJS.dialog2("#api-modal").show();
              }
            });
          },
          error: function(xhr, status, error) {
            console.log("Error in Jira API call:", status, error);
            AJS.$("#api-response").html("<p style='color: red;'>Failed to fetch Jira issue data. Status: " + xhr.status + ", Error: " + error + "</p>");
            AJS.dialog2("#api-modal").show();
          }
        });
      });

      AJS.$("#close-button, .aui-dialog2-header-close").on("click", function() {
        AJS.dialog2("#api-modal").hide();
        setTimeout(function() {
          AJS.$("#api-modal").attr("aria-hidden", "true").hide();
          AJS.$("#api-response").html("Loading data...");
        }, 300);
      });

      AJS.$("#show-popup").data('events-attached', true);
    }
  }

  if (typeof jQuery !== "undefined") {
    jQuery(document).ready(function() {
      initStuff();
    });
  }

  document.addEventListener("DOMContentLoaded", function() {
    initStuff();
    JIRA.bind(JIRA.Events.NEW_CONTENT_ADDED, function() {
      initStuff();
    });
  });
</script>