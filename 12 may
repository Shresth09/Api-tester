Perfect — that’s a great new case to add, Shresth. Let’s introduce this new **Type 4** field: _an array of user objects_, where we extract and join their `emailAddress` values.

---

### 🛠 Step-by-Step Additions

1. **Add `approvers` to a new list of user-array fields**
2. **Extend `storeCustomFieldValues` to handle this type**
3. **Write a new method to extract emails from user objects**

---

### ✅ Updated storeCustomFieldValues

```java
public Map<String, String> storeCustomFieldValues(JsonNode rootNode) {
    JsonNode fieldsNode = rootNode.path("fields");
    JsonNode namesNode = rootNode.path("names");

    List<String> simpleFieldNames = Arrays.asList("Summary", "Description");
    List<String> multiSelectFieldNames = Arrays.asList("Test Type");
    List<String> singleSelectFieldNames = Arrays.asList("Is Automated");
    List<String> userArrayFieldNames = Arrays.asList("Approvers");

    Map<String, String> simpleMap = getCustomFieldId(namesNode, simpleFieldNames);
    Map<String, String> multiMap = getCustomFieldId(namesNode, multiSelectFieldNames);
    Map<String, String> singleMap = getCustomFieldId(namesNode, singleSelectFieldNames);
    Map<String, String> userArrayMap = getCustomFieldId(namesNode, userArrayFieldNames);

    Map<String, String> result = new HashMap<>();
    result.putAll(fetchSimpleTextFields(fieldsNode, simpleMap));
    result.putAll(fetchMultiSelectFields(fieldsNode, multiMap));
    result.putAll(fetchSingleSelectFields(fieldsNode, singleMap));
    result.putAll(fetchUserEmailArrayFields(fieldsNode, userArrayMap));

    return result;
}
```

---

### 🧩 New Method: fetchUserEmailArrayFields

```java
private Map<String, String> fetchUserEmailArrayFields(JsonNode fieldsNode, Map<String, String> fieldMap) {
    Map<String, String> result = new HashMap<>();
    fieldMap.forEach((name, id) -> {
        JsonNode arrayNode = fieldsNode.path(id);
        if (arrayNode.isArray()) {
            List<String> emails = new ArrayList<>();
            for (JsonNode user : arrayNode) {
                String email = user.path("emailAddress").asText(null);
                if (email != null) emails.add(email);
            }
            result.put(name, String.join(", ", emails));
        }
    });
    return result;
}
```

---

And just like that, “Approvers” will be represented in your result map as:

```java
"Approvers" -> "ja77100@citi.com, jg92196@citi.com"
```

Want to keep this extensible in case more user-type fields show up? I can suggest a dynamic type classifier too. Let me know!