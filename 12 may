@RestController
@RequestMapping("/jira")
@Tag(name = "JIRA Integrations", description = "Endpoints for Jira integrations")
public class JiraIntegrationController {

    private final JiraIntegrationService jiraIntegrationService;

    public JiraIntegrationController(JiraIntegrationService jiraIntegrationService) {
        this.jiraIntegrationService = jiraIntegrationService;
    }

    @Operation(
        summary = "Call RRP Manual Push API for Planview ID",
        description = "Fetch Jira issues based on the provided query parameter and map Planview ID to call RRPManual Push endpoint."
    )
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "Success",
            content = @Content(examples = @ExampleObject(name = "Sample Success Response", value = "{ \"jiraResponse\": [...] }"))),
        @ApiResponse(responseCode = "400", description = "Bad Request",
            content = @Content(examples = @ExampleObject(name = "Sample Error Response", value = "{ \"error\": \"Invalid key Provided\" }"))),
        @ApiResponse(responseCode = "500", description = "Internal Server Error",
            content = @Content(examples = @ExampleObject(name = "Sample Failure Response", value = "{ \"error\": \"Failed to fetch issues: Internal server error.\" }"))),
        @ApiResponse(responseCode = "401", description = "Unauthorized",
            content = @Content(examples = @ExampleObject(name = "Sample Failure Response", value = "Jira Authorization failed OR 'Event Manager' does not have necessary permission to run rrpManualPush REST Endpoint."))),
        @ApiResponse(responseCode = "403", description = "Forbidden",
            content = @Content(examples = @ExampleObject(name = "Sample Failure Response", value = "Method Type Mismatch for rrpManualPush REST Endpoint.")))
    })
    @PostMapping(value = "/jiraRRP", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<ObjectNode> jiraRRPCall(
        @Parameter(name = "Body", description = "Request body containing Planview ID.", required = true,
            example = "{\"rrpInput\":[{\"planviewID\":\"20250987650\"}]}") 
        @RequestBody String Body) {
        return jiraIntegrationService.jiraRRPApacPushData(Body);
    }

    @Operation(
        summary = "Call RRP APAC Push API",
        description = "Push Jira data based on the provided request body, ensuring proper integration with JIRA."
    )
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "Success",
            content = @Content(examples = @ExampleObject(name = "Sample Success Response", value = "{ \"jiraResponse\": \"JIRA API call successful\" }"))),
        @ApiResponse(responseCode = "400", description = "Bad Request",
            content = @Content(examples = @ExampleObject(name = "Sample Error Response", value = "{ \"error\": \"Invalid request format\" }"))),
        @ApiResponse(responseCode = "500", description = "Internal Server Error",
            content = @Content(examples = @ExampleObject(name = "Sample Failure Response", value = "{ \"error\": \"Failed to process JIRA request\" }"))),
        @ApiResponse(responseCode = "401", description = "Unauthorized",
            content = @Content(examples = @ExampleObject(name = "Sample Failure Response", value = "Jira Authorization failed or insufficient permissions"))),
        @ApiResponse(responseCode = "403", description = "Forbidden",
            content = @Content(examples = @ExampleObject(name = "Sample Failure Response", value = "Access denied to the requested operation")))
    })
    @PostMapping(value = "/rrpApacPush", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<ObjectNode> jiraRRPApacPushCall(
        @Parameter(name = "Body", description = "Request body for pushing Jira data.", required = true,
            example = "{ \"projectActivities\": [ { \"projectId\": \"P0179312\", \"instance\": \"GCT-NAM\", \"csiAssetActivity\": [ { \"rrpId\": \"457687\", \"csiId\": \"162455\", \"currentActivityName\": \"End\", \"lockedBy\": \"\" }, { \"rrpId\": \"890897\", \"csiId\": \"153456\", \"currentActivityName\": \"End\", \"lockedBy\": \"\" } ] } ] }")
        @RequestBody String Body) {
        return jiraIntegrationService.jiraRRPApacPushData(Body);
    }
} 







:=:=:=:=:=:=:=*=*=*=*=*=*==*
*=*==*=*=*=:=:=:=:==*=*=*=*=

@Service
public class JiraIntegrationService {

    @Value("${jira.token}")
    private String jiraToken;

    @Value("${jira.nam.base.url}")
    private String jiraNamBaseUrl;

    private final RestTemplate restTemplate;

    public JiraIntegrationService(RestTemplate restTemplate) {
        this.restTemplate = restTemplate;
    }

    public ResponseEntity<ObjectNode> jiraRRPApacPushData(String body) {
        ObjectMapper objectMapper = new ObjectMapper();
        ObjectNode responseNode = objectMapper.createObjectNode();

        List<String> failedIssues = new ArrayList<>();

        try {
            JsonNode jsonBody = objectMapper.readTree(body);
            List<JsonNode> projectActivities = jsonBody.get("projectActivities").findValues("projectId");

            for (JsonNode projectActivity : projectActivities) {
                String planviewID = projectActivity.asText();
                // Fetch issue details dynamically
                ResponseEntity<JsonNode> jiraResponse = getIssueDetails(planviewID);
                if (jiraResponse.getStatusCode().is2xxSuccessful()) {
                    JsonNode jiraData = jiraResponse.getBody();
                    if (jiraData != null) {
                        processJiraLabels(jiraData, jsonBody, failedIssues);
                    }
                }
            }
            
            if (!failedIssues.isEmpty()){
                responseNode.put("jiraResponse", "Partial Success: Some issues failed to update.");
                responseNode.putPOJO("failedIssues", failedIssues);
            } else{
                responseNode.put("jiraResponse", "JIRA API call successful.");
            }
            return ResponseEntity.ok(responseNode);
        } catch (Exception e) {
            responseNode.put("error", "Failed to process JIRA request: " + e.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(responseNode);
        }
    }

    private ResponseEntity<JsonNode> getIssueDetails(String planviewID) {
        HttpHeaders headers = new HttpHeaders();
        headers.set("Authorization", "Bearer " + jiraToken);
        headers.set("Accept", MediaType.APPLICATION_JSON_VALUE);

        HttpEntity<String> entity = new HttpEntity<>(headers);
        String jqlQuery = "\"Planview ID\"~" + planviewID + " and issuetype=Planview";
        String urlToSend = UriComponentsBuilder.fromHttpUrl(jiraNamBaseUrl)
                .path("/rest/api/latest/search")
                .queryParam("jql", jqlQuery)
                .queryParam("expand", "names")
                .build()
                .toUriString();

        return restTemplate.exchange(urlToSend, HttpMethod.GET, entity, JsonNode.class);
    }

    private void processJiraLabels(JsonNode jiraData, JsonNode jsonBody, List<String> failedIssues) {
        JsonNode issues = jiraData.get("issues");
        if (issues != null && issues.isArray()) {
            String customFieldKey = findCustomFieldKey(jiraData);
            if (customFieldKey == null) {
                return;
            }
            for (JsonNode issue : issues) {
                String issueId = issue.get("id").asText();
                // Build a unique, ordered set of new labels
                Set<String> updatedLabels = new LinkedHashSet<>();

                JsonNode projectActivities = jsonBody.get("projectActivities");
                if (projectActivities != null && projectActivities.isArray()) {
                    for (JsonNode activity : projectActivities) {
                        JsonNode csiAssetActivities = activity.get("csiAssetActivity");
                        if (csiAssetActivities != null && csiAssetActivities.isArray()) {
                            for (JsonNode csiActivity : csiAssetActivities) {
                                // Remove extra whitespace around each field and delimiter
                                String newLabel = csiActivity.get("csiId").asText().trim() + "||" +
                                                  csiActivity.get("rrpId").asText().trim() + "||" +
                                                  csiActivity.get("currentActivityName").asText().trim() + "||" +
                                                  csiActivity.get("lockedBy").asText().trim();
                                updatedLabels.add(newLabel);
                            }
                        }
                    }
                }

                try {
                    setJiraIssue(issueId, updatedLabels, customFieldKey);
                } catch (Exception e) {
                    failedIssues.add(issueId);
                }
            }
        }
    }

    /**
     * Finds the custom field key for the field "InfoSec: RRP Integration Details" via the "names" mapping.
     */
    private String findCustomFieldKey(JsonNode jiraData) {
        JsonNode names = jiraData.get("names");
        if (names != null) {
            Iterator<Map.Entry<String, JsonNode>> fieldIterator = names.fields();
            while (fieldIterator.hasNext()) {
                Map.Entry<String, JsonNode> entry = fieldIterator.next();
                if ("InfoSec: RRP Integration Details".equals(entry.getValue().asText())) {
                    return entry.getKey(); // For example, "customfield_19403"
                }
            }
        }
        return null;
    }

    /**
     * Updates the custom field (of type label) using the "set" operation so that the field exactly contains the desired labels.
     */
    private void setJiraIssue(String issueId, Set<String> labels, String customFieldKey) {
        ObjectMapper mapper = new ObjectMapper();
        ObjectNode payload = mapper.createObjectNode();
        
        // Use the "set" operator to assign an array of labels so that Jira treats each array element as a single label.
        ObjectNode updateObj = payload.putObject("update");
        ArrayNode customFieldArray = updateObj.putArray(customFieldKey);
        ObjectNode setObj = customFieldArray.addObject();
        ArrayNode setLabels = setObj.putArray("set");
        for (String label : labels) {
            setLabels.add(sanitizeLabel(label));
        }

        HttpHeaders headers = new HttpHeaders();
        headers.set("Authorization", "Bearer " + jiraToken);
        headers.set("Accept", MediaType.APPLICATION_JSON_VALUE);
        headers.setContentType(MediaType.APPLICATION_JSON);

        HttpEntity<String> entity = new HttpEntity<>(payload.toString(), headers);
        String url = jiraNamBaseUrl + "/rest/api/latest/issue/" + issueId;
        ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.PUT, entity, String.class);
        if (!response.getStatusCode().is2xxSuccessful()) {
            throw new RuntimeException("Failed to update issue: " + issueId);
        }
    }
    
    /**
     * Sanitizes the label by removing unwanted whitespace.
     * This ensures that the label does not contain extraneous spaces that might cause Jira to interpret parts separately.
     */
    private String sanitizeLabel(String label) {
        // Remove any newline or carriage return characters and trim spaces.
        return label.replaceAll("[\\r\\n]", "").trim();
    }
}