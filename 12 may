<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Reusable Circular Progress Bar</title>
    <style>
        body {
            font-family: sans-serif;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            background-color: #f0f0f0;
            margin: 0;
            gap: 50px; /* Space between different progress bars and controls */
        }

        /* --- Progress Bar Component Styling --- */
        .circular-progress-bar {
            --size: 200px;       /* Default size of the progress bar */
            --stroke-width: 15px; /* Default stroke width */
            --track-color: #e6e6e6;
            --text-color: #333;

            position: relative;
            width: var(--size);
            height: var(--size);
        }

        .circular-progress-bar svg {
            width: 100%;
            height: 100%;
            transform: rotate(-90deg); /* Start the circle from the top */
        }

        .circular-progress-bar .progress-ring-track {
            stroke: var(--track-color);
            stroke-width: var(--stroke-width);
            fill: transparent;
            /* Dynamically set r, cx, cy in JS or based on calculations if size changes */
        }

        .circular-progress-bar .progress-ring-bar {
            stroke-width: var(--stroke-width);
            fill: transparent;
            transition: stroke-dasharray 0.35s ease-out, stroke 0.35s ease-out;
        }

        .circular-progress-bar .progress-text {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: calc(var(--size) * 0.125); /* Adjust font size relative to component size */
            font-weight: bold;
            color: var(--text-color);
        }

        /* Color classes */
        .circular-progress-bar .red {
            stroke: #ff4d4d; /* Red */
        }

        .circular-progress-bar .yellow {
            stroke: #ffd700; /* Yellow */
        }

        .circular-progress-bar .green {
            stroke: #5cb85c; /* Green */
        }

        /* --- Controls Styling --- */
        .controls {
            display: flex;
            gap: 10px;
            align-items: center;
        }

        input[type="number"] {
            padding: 8px;
            border: 1px solid #ccc;
            border-radius: 4px;
            font-size: 1em;
            width: 80px;
            text-align: center;
        }

        button {
            padding: 10px 15px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 1em;
        }

        button:hover {
            background-color: #0056b3;
        }
    </style>
</head>
<body>

    <h1>Reusable Circular Progress Bars</h1>

    <div id="progressBar1" class="circular-progress-bar" style="--size: 150px; --stroke-width: 12px;">
        <svg class="progress-ring">
            <circle class="progress-ring-track" r="calc(var(--size) / 2 - var(--stroke-width) / 2)"
                    cx="calc(var(--size) / 2)" cy="calc(var(--size) / 2)"/>
            <circle class="progress-ring-bar" r="calc(var(--size) / 2 - var(--stroke-width) / 2)"
                    cx="calc(var(--size) / 2)" cy="calc(var(--size) / 2)"/>
        </svg>
        <div class="progress-text"></div>
    </div>
    <div class="controls">
        <label for="percentageInput1">Progress Bar 1 (%):</label>
        <input type="number" id="percentageInput1" value="60" min="0" max="100">
        <button onclick="updateProgressBar('progressBar1', document.getElementById('percentageInput1').value)">Update</button>
    </div>

    <div id="progressBar2" class="circular-progress-bar" style="--size: 100px; --stroke-width: 10px;">
        <svg class="progress-ring">
            <circle class="progress-ring-track" r="calc(var(--size) / 2 - var(--stroke-width) / 2)"
                    cx="calc(var(--size) / 2)" cy="calc(var(--size) / 2)"/>
            <circle class="progress-ring-bar" r="calc(var(--size) / 2 - var(--stroke-width) / 2)"
                    cx="calc(var(--size) / 2)" cy="calc(var(--size) / 2)"/>
        </svg>
        <div class="progress-text"></div>
    </div>
    <div class="controls">
        <label for="percentageInput2">Progress Bar 2 (%):</label>
        <input type="number" id="percentageInput2" value="25" min="0" max="100">
        <button onclick="updateProgressBar('progressBar2', document.getElementById('percentageInput2').value)">Update</button>
    </div>

    <div id="progressBar3" class="circular-progress-bar" style="--size: 250px; --stroke-width: 20px;">
        <svg class="progress-ring">
            <circle class="progress-ring-track" r="calc(var(--size) / 2 - var(--stroke-width) / 2)"
                    cx="calc(var(--size) / 2)" cy="calc(var(--size) / 2)"/>
            <circle class="progress-ring-bar" r="calc(var(--size) / 2 - var(--stroke-width) / 2)"
                    cx="calc(var(--size) / 2)" cy="calc(var(--size) / 2)"/>
        </svg>
        <div class="progress-text"></div>
    </div>
    <div class="controls">
        <label for="percentageInput3">Progress Bar 3 (%):</label>
        <input type="number" id="percentageInput3" value="85" min="0" max="100">
        <button onclick="updateProgressBar('progressBar3', document.getElementById('percentageInput3').value)">Update</button>
    </div>


    <script>
        // Store references to progress bar elements and their circumference for efficiency
        const progressBars = {};

        function initProgressBar(progressBarElement) {
            const svg = progressBarElement.querySelector('.progress-ring');
            const progressBar = progressBarElement.querySelector('.progress-ring-bar');
            const progressText = progressBarElement.querySelector('.progress-text');

            // Get computed style properties for dynamic calculations
            const size = parseFloat(getComputedStyle(progressBarElement).getPropertyValue('--size'));
            const strokeWidth = parseFloat(getComputedStyle(progressBarElement).getPropertyValue('--stroke-width'));

            const radius = (size / 2) - (strokeWidth / 2);
            const circumference = 2 * Math.PI * radius;

            progressBar.style.strokeDasharray = `${circumference} ${circumference}`;
            progressBar.style.strokeDashoffset = circumference;

            // Store for later updates
            progressBars[progressBarElement.id] = {
                progressBar,
                progressText,
                circumference,
                radius
            };
        }

        function setProgressBarPercentage(progressBarId, percent) {
            const { progressBar, progressText, circumference } = progressBars[progressBarId];
            const offset = circumference - (percent / 100) * circumference;
            progressBar.style.strokeDashoffset = offset;
            progressText.textContent = `${percent}%`;

            // Remove existing color classes
            progressBar.classList.remove('red', 'yellow', 'green');

            // Add new color class based on percentage
            if (percent >= 0 && percent <= 40) {
                progressBar.classList.add('red');
            } else if (percent > 40 && percent <= 70) {
                progressBar.classList.add('yellow');
            } else if (percent > 70 && percent <= 100) {
                progressBar.classList.add('green');
            }
        }

        // Global function to update a specific progress bar
        window.updateProgressBar = function(progressBarId, percentageValue) {
            let percentage = parseInt(percentageValue);

            if (isNaN(percentage) || percentage < 0) {
                percentage = 0;
            } else if (percentage > 100) {
                percentage = 100;
            }

            // Update the corresponding input field if it exists (for real-time updates)
            const inputElement = document.getElementById(`percentageInput${progressBarId.replace('progressBar', '')}`);
            if (inputElement) {
                inputElement.value = percentage;
            }
            
            setProgressBarPercentage(progressBarId, percentage);
        };

        document.addEventListener('DOMContentLoaded', () => {
            // Initialize all progress bars found on the page
            document.querySelectorAll('.circular-progress-bar').forEach(barElement => {
                initProgressBar(barElement);
                // Set initial percentage for each bar based on its associated input
                const inputId = `percentageInput${barElement.id.replace('progressBar', '')}`;
                const initialPercentage = document.getElementById(inputId)?.value || 0;
                window.updateProgressBar(barElement.id, initialPercentage);

                // Add real-time update listener for each input
                document.getElementById(inputId)?.addEventListener('input', (event) => {
                    window.updateProgressBar(barElement.id, event.target.value);
                });
            });
        });
    </script>
</body>
</html>
