private ObjectNode processApiResponse(ResponseEntity<String> response, String query) {
    try {
        // Initialize ObjectMapper with ESCAPE_NON_ASCII enabled
        ObjectMapper mapper = new ObjectMapper();
        mapper.configure(JsonGenerator.Feature.ESCAPE_NON_ASCII, true);

        // Parse the API response
        ObjectNode responseJson = (ObjectNode) mapper.readTree(response.getBody());
        ArrayNode issuesArray = (ArrayNode) responseJson.get("issues");

        // Construct the response JSON
        ObjectNode resultJson = mapper.createObjectNode();
        ArrayNode itemsArray = mapper.createArrayNode();

        for (int i = 0; i < issuesArray.size(); i++) {
            ObjectNode issueObject = (ObjectNode) issuesArray.get(i);
            String summary = issueObject.get("fields").get("summary").asText();

            // Use Unicode-encoded <b> tags
            String highlighted = summary.replace(query, "\\u003Cb\\u003E" + query + "\\u003C/b\\u003E");

            // Add data to items array
            ObjectNode item = mapper.createObjectNode();
            item.put("value", summary);
            item.put("html", highlighted);
            item.put("label", summary);
            itemsArray.add(item);
        }

        resultJson.set("items", itemsArray);
        return resultJson;

    } catch (Exception ex) {
        ex.printStackTrace();
        ObjectMapper mapper = new ObjectMapper();
        ObjectNode errorJson = mapper.createObjectNode();
        errorJson.put("error", "Failed to process response: " + ex.getMessage());
        return errorJson;
    }
}








package com.example.searchapp.controller;

import com.fasterxml.jackson.databind.node.ObjectNode;
import com.example.searchapp.service.RestEndPointService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@RestController
@CrossOrigin(origins = "*")
public class RestEndPointController {

    @Autowired
    private RestEndPointService restEndPointService;

    // Handles GET requests to /search
    @GetMapping(value = "/search", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<ObjectNode> getIssue(@RequestParam("query") String query) {
        // Delegate the logic to the service class
        return restEndPointService.getIssueByKey(query);
    }
}


package com.example.searchapp.service;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

@Service
public class RestEndPointService {

    @Value("${jira_nam_base_url}")
    private String jiraNamBaseUrl;

    @Value("${jira_token}")
    private String jiraToken;

    private final RestTemplate restTemplate;

    public RestEndPointService(RestTemplate restTemplate) {
        this.restTemplate = restTemplate;
    }

    public ResponseEntity<ObjectNode> getIssueByKey(String query) {
        try {
            // Set up headers with authorization
            HttpHeaders headers = new HttpHeaders();
            headers.set("Authorization", "Bearer " + jiraToken);
            headers.set("Accept", MediaType.APPLICATION_JSON_VALUE);
            HttpEntity<String> entity = new HttpEntity<>(headers);

            // Build the Jira REST API URL with the query parameter
            String urlToSend = jiraNamBaseUrl + "/rest/api/2/search?jql=issuetype=Application AND summary~\"" + query + "\"";
            System.out.println("Calling URL: " + urlToSend);

            // Call the Jira API
            ResponseEntity<String> response = restTemplate.exchange(urlToSend, HttpMethod.GET, entity, String.class);

            System.out.println("Response success: " + response.getStatusCode());
            // Process the API response and return the result
            return new ResponseEntity<>(processApiResponse(response, query), HttpStatus.OK);

        } catch (Exception ex) {
            ex.printStackTrace();
            // Create and return an error JSON response
            ObjectMapper mapper = new ObjectMapper();
            ObjectNode errorResponse = mapper.createObjectNode();
            errorResponse.put("error", "Failed to fetch issues: " + ex.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(errorResponse);
        }
    }

    private ObjectNode processApiResponse(ResponseEntity<String> response, String query) {
        try {
            // Initialize ObjectMapper and parse the Jira API response
            ObjectMapper mapper = new ObjectMapper();
            ObjectNode responseJson = (ObjectNode) mapper.readTree(response.getBody());
            ArrayNode issuesArray = (ArrayNode) responseJson.get("issues");

            // Create the final result JSON structure
            ObjectNode resultJson = mapper.createObjectNode();
            ArrayNode itemsArray = mapper.createArrayNode();

            // Iterate through the issues and construct the items array
            for (int i = 0; i < issuesArray.size(); i++) {
                ObjectNode issueObject = (ObjectNode) issuesArray.get(i);
                String summary = issueObject.get("fields").get("summary").asText();

                // Highlight the query in the summary
                String highlighted = summary.replace(query, "\u003Cb\u003E" + query + "\u003C/b\u003E");

                // Add each issue's data to the items array
                ObjectNode item = mapper.createObjectNode();
                item.put("value", summary);
                item.put("html", highlighted);
                item.put("label", summary);
                itemsArray.add(item);
            }

            // Wrap the items array in the result JSON object
            resultJson.set("items", itemsArray);
            return resultJson;

        } catch (Exception ex) {
            ex.printStackTrace();
            // Handle any errors during processing
            ObjectMapper mapper = new ObjectMapper();
            ObjectNode errorJson = mapper.createObjectNode();
            errorJson.put("error", "Failed to process response: " + ex.getMessage());
            return errorJson;
        }
    }
}