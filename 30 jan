package com.example.plugins.servlet;

import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.customfields.manager.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.fields.config.FieldConfigSchemeManager;
import com.atlassian.jira.issue.fields.screen.FieldScreen;
import com.atlassian.jira.issue.fields.screen.FieldScreenTab;
import com.atlassian.jira.user.ApplicationUser;
import com.atlassian.jira.security.groups.GroupManager;
import com.atlassian.plugin.webresource.TemplateRenderer;
import com.atlassian.sal.api.pluginsettings.PluginSettings;
import com.atlassian.sal.api.pluginsettings.PluginSettingsFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

public class IssueCRUD extends HttpServlet {
    private static final Logger Log = LoggerFactory.getLogger(IssueCRUD.class);

    private final TemplateRenderer templateRenderer;
    private final PluginSettingsFactory pluginSettingsFactory;

    // setting the Storage key location
    private static final String PLUGIN_STORAGE_KEY = "com.example.plugins.tutorial.servlet.IssueCRUD";
    // setting the Default url for RQM
    private static final String DEFAULT_API_URL = "default-url";

    public IssueCRUD(TemplateRenderer templateRenderer, PluginSettingsFactory pluginSettingsFactory) {
        this.templateRenderer = templateRenderer;
        this.pluginSettingsFactory = pluginSettingsFactory;
    }

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        // Adding CORS for access from different origins
        resp.setHeader("Access-Control-Allow-Origin", "*");
        resp.setHeader("Access-Control-Allow-Methods", "GET, POST, OPTIONS");
        resp.setHeader("Access-Control-Allow-Headers", "Content-Type");

        // Check if the user is logged to the Jira instance before accessing the URL
        ApplicationUser user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser();
        GroupManager groupManager = ComponentAccessor.getGroupManager();

        if (user == null) {
            resp.sendError(HttpServletResponse.SC_NOT_FOUND);
            return;
        }

        // Check if the user is an admin
        if (!groupManager.isUserInGroup(user, "jira-administrators")) {
            resp.setStatus(HttpServletResponse.SC_FORBIDDEN);
            resp.getWriter().write("You do not have permission to access this page.");
            return;
        }

        String action = req.getParameter("action");

        // Add custom field creation logic here
        createCustomField(resp);

        // Existing actions
        if ("getUrl".equals(action)) {
            PluginSettings pluginSettings = pluginSettingsFactory.createGlobalSettings();
            String apiurl = (String) pluginSettings.get(PLUGIN_STORAGE_KEY + ".apiUrl");

            if (apiurl == null) {
                apiurl = DEFAULT_API_URL;
            }

            resp.setContentType("application/json");
            resp.getWriter().write("{\"apiurl\":\"" + apiurl + "\"}");
        } else if ("updateUrl".equals(action)) {
            try {
                String newUrl = req.getParameter("url");
                PluginSettings pluginSettings = pluginSettingsFactory.createGlobalSettings();
                pluginSettings.put(PLUGIN_STORAGE_KEY + ".apiUrl", newUrl);

                resp.setContentType("text/plain");
                resp.getWriter().write("URL updated successfully!");
            } catch (Exception e) {
                Log.error("Error processing update URL request", e);
                resp.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
                resp.getWriter().write("Error processing request!");
            }
        } else if ("getProjects".equals(action)) {
            ProjectManager projectManager = ComponentAccessor.getProjectManager();
            List<Project> projects = projectManager.getProjectObjects();
            String projectList = projects.stream()
                    .map(project -> project.getKey() + "-" + project.getName())
                    .collect(Collectors.joining(","));

            resp.setContentType("text/plain");
            resp.getWriter().write(projectList);
        } else if ("getSelectedProjects".equals(action)) {
            PluginSettings pluginSettings = pluginSettingsFactory.createGlobalSettings();
            String selectedProjects = (String) pluginSettings.get(PLUGIN_STORAGE_KEY + ".selectedProjects");

            if (selectedProjects == null) {
                selectedProjects = "";
            }

            resp.setContentType("text/plain");
            resp.getWriter().write(selectedProjects);
        } else if ("applySelection".equals(action)) {
            String projectKeys = req.getParameter("keys");
            if ("SELECT-ALL-CHECKED".equals(projectKeys)) {
                ProjectManager projectManager = ComponentAccessor.getProjectManager();
                List<Project> projects = projectManager.getProjectObjects();
                projectKeys = projects.stream().map(Project::getKey).collect(Collectors.joining(","));
            }
            PluginSettings pluginSettings = pluginSettingsFactory.createGlobalSettings();
            pluginSettings.put(PLUGIN_STORAGE_KEY + ".selectedProjects", projectKeys);
            resp.setContentType("text/plain");
            resp.getWriter().write("Projects applied successfully!");
        } else {
            resp.setContentType("text/html; charset=utf-8");
            templateRenderer.render("templates/issuecrud-page.vm", resp.getWriter());
        }
    }

    private void createCustomField(HttpServletResponse resp) {
        try {
            CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();
            String fieldName = "Score";

            // Check if the custom field already exists
            CustomField customField = customFieldManager.getCustomFieldObjectByName(fieldName);
            if (customField == null) {
                // Create the custom field
                FieldConfigSchemeManager fieldConfigSchemeManager = ComponentAccessor.getFieldConfigSchemeManager();
                customField = customFieldManager.createCustomField(fieldName,
                        "The score of the issue's description",
                        customFieldManager.getCustomFieldType("com.atlassian.jira.plugin.system.customfieldtypes:float"),
                        customFieldManager.getCustomFieldSearcher("com.atlassian.jira.plugin.system.customfieldtypes:exactnumber"),
                        Collections.emptyList(),
                        Collections.singletonList(fieldConfigSchemeManager.getDefaultFieldConfigScheme()));

                // Associate the custom field with the default screen
                List<FieldScreen> screens = ComponentAccessor.getFieldScreenManager().getFieldScreens();
                for (FieldScreen screen : screens) {
                    List<FieldScreenTab> tabs = screen.getTabs();
                    for (FieldScreenTab tab : tabs) {
                        if (!tab.getFieldScreenLayoutItems().stream().anyMatch(item -> item.getFieldId().equals(customField.getId()))) {
                            tab.addFieldScreenLayoutItem(customField.getId());
                        }
                    }
                }
            }
        } catch (Exception e) {
            Log.error("Error creating custom field", e);
        }
    }
}






#set($customFieldManager = $componentAccessor.getCustomFieldManager())
#set($issue = $issue)
#set($scoreField = $customFieldManager.getCustomFieldObjectByName("Score"))
#set($scoreValue = $issue.getCustomFieldValue($scoreField))

<div class="score-button-container">
    <!-- Your existing button code -->
    <button id="scoreButton">Calculate Score</button>

    <!-- Display the custom field value below the button -->
    <div class="score-display">
        Score: $scoreValue
    </div>
</div>



private void createCustomField(HttpServletResponse resp) {
    try {
        CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();
        String fieldName = "Score";

        // Check if the custom field already exists
        CustomField customField = customFieldManager.getCustomFieldObjectByName(fieldName);
        if (customField == null) {
            // Create the custom field
            customField = customFieldManager.createCustomField(
                    fieldName,
                    "The score of the issue's description",
                    customFieldManager.getCustomFieldType("com.atlassian.jira.plugin.system.customfieldtypes:float"),
                    customFieldManager.getCustomFieldSearcher("com.atlassian.jira.plugin.system.customfieldtypes:exactnumber"),
                    Collections.emptyList(),
                    null);

            // Associate the custom field with the default screen
            List<FieldScreen> screens = ComponentAccessor.getFieldScreenManager().getFieldScreens();
            for (FieldScreen screen : screens) {
                List<FieldScreenTab> tabs = screen.getTabs();
                for (FieldScreenTab tab : tabs) {
                    if (!tab.getFieldScreenLayoutItems().stream().anyMatch(item -> item.getFieldId().equals(customField.getId()))) {
                        tab.addFieldScreenLayoutItem(customField.getId());
                    }
                }
            }
        }
    } catch (Exception e) {
        Log.error("Error creating custom field", e);
    }
}






#set($componentAccessor = $action.getComponentAccessor())
#set($customFieldManager = $componentAccessor.getCustomFieldManager())
#set($issue = $issue)
#set($scoreField = $customFieldManager.getCustomFieldObjectByName("Score"))

#if($scoreField)
    #set($scoreValue = $issue.getCustomFieldValue($scoreField))
    #set($log = $log.debug("Score Field Value: " + $scoreValue))
#else
    #set($scoreValue = "Score field not found")
    #set($log = $log.debug("Score Field not found"))
#end

<div class="score-button-container">
    <!-- Your existing button code -->
    <button id="scoreButton">Calculate Score</button>

    <!-- Display the custom field value below the button -->
    <div class="score-display">
        Score: $scoreValue
    </div>
</div>