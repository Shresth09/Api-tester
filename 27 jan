Sure! Let's refactor the code to use a `for` loop instead of a stream filter. Hereâ€™s how you can do it:

```java
ProjectManager projectManager = ComponentAccessor.getProjectManager();
WorkflowSchemeManager workflowSchemeManager = ComponentAccessor.getWorkflowSchemeManager();
String targetSchemeName = "NEW: Project Management Workflow Scheme";

// Fetch all projects
List<Project> projects = projectManager.getProjectObjects();
List<Project> projectsWithTargetWorkflowScheme = new ArrayList<>();

// Filter projects associated with the target workflow scheme using a for loop
for (Project project : projects) {
    try {
        Scheme scheme = workflowSchemeManager.getWorkflowSchemeObj(project);
        if (scheme != null && scheme.getName().equals(targetSchemeName)) {
            projectsWithTargetWorkflowScheme.add(project);
        }
    } catch (Exception e) {
        // Handle the exception (optional)
    }
}

// Create a comma-separated list of project keys and names
String projectList = projectsWithTargetWorkflowScheme.stream()
    .map(project -> project.getKey() + "-" + project.getName())
    .collect(Collectors.joining(","));

// Output the project list
resp.setContentType("text/plain");
resp.getWriter().write(projectList);
```

### Explanation:
- A `for` loop iterates through each project in the list of projects.
- Inside the loop, it retrieves the workflow scheme associated with the project.
- If the scheme matches the target scheme name, the project is added to the list of projects with the target workflow scheme.
- The final list of projects is converted into a comma-separated string of project keys and names.
- The result is sent as the HTTP response.

This approach should align with your requirement to use a `for` loop instead of a stream filter. Let me know if you need further adjustments or have any other questions!