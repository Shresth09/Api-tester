<!-- Web Panel -->
<web-panel key="Jira-Flow-Agent" location="atl.jira.view.issue.right.context" weight="1">
    <!-- Context provider class for the web panel -->
    <context-provider class="com.example.plugins.PopupContextProvider"/>
    <!-- Velocity template resource for the web panel -->
    <resource type="velocity" name="view" location="templates/popup.vm"/>
    <!-- Description for the web panel -->
    <description>This web panel displays a popup in the right context of the Jira issue view.</description>
</web-panel>

<!-- Web Section -->
<web-section name="URL Configuration" key="ai-ram-config-websection-key" location="admin_applications_section" weight="1000">
    <label key="JFA-CONFIGURATION"/>
    <!-- Description for the web section -->
    <description>This web section is used for URL Configuration in the admin applications section.</description>
</web-section>

<!-- Web Item -->
<web-item name="Configuration" key="configuration" section="admin_applications_section/ai-ram-config-websection-key" weight="1000">
    <label key="Configure-JFA"/>
    <!-- Link to the configuration servlet -->
    <link linkId="configuration-Link">/plugins/servlet/issuecrud</link>
    <!-- Description for the web item -->
    <description>This web item provides a link to the configuration servlet under the URL Configuration section.</description>
</web-item>

<!-- Internationalization Resource Bundle -->
<resource type="i18n" name="i18n" location="AI_Plugin_Key"/>
<!-- Description for the i18n resource bundle -->
<description>This resource defines the internationalization (i18n) resource bundle for the plugin.</description>

<!-- Servlet -->
<servlet name="Issue CRUD" i18n-name-key="issue-crud.name" key="issue-crud" class="com.example.plugins.tutorial.servlet.IssueCRUD">
    <description key="issue-crud.description">The Issue CRUD Plugin</description>
    <url-pattern>/issuecrud</url-pattern>
    <!-- Description for the servlet -->
    <description>This servlet handles CRUD operations for issues with the URL pattern /issuecrud.</description>
    <!-- Parameters for the servlet -->
    <param name="templateRenderer" value="templateRenderer"/>
</servlet>








else if ("applySelection".equals(action)) {

    String projectKeys = req.getParameter("keys");

    if ("SELECT-ALL-CHECKED".equals(projectKeys)) {

        ProjectManager projectManager = ComponentAccessor.getProjectManager();
        WorkflowSchemeManager workflowSchemeManager = ComponentAccessor.getWorkflowSchemeManager();

        List<Project> projects = projectManager.getProjectObjects();
        String targetSchemeName = "1_Dev Workflow Scheme";

        List<Project> projectsWithTargetWorkflowScheme = new ArrayList<>();

        for (Project project : projects) {
            try {
                WorkflowScheme scheme = workflowSchemeManager.getWorkflowSchemeObj(project);
                if (scheme != null && scheme.getName().equals(targetSchemeName)) {
                    projectsWithTargetWorkflowScheme.add(project);
                }
            } catch (Exception e) {
                System.out.println("Exception Occured: " + e);
            }
        }

        projectKeys = projectsWithTargetWorkflowScheme.stream().map(Project::getKey).collect(Collectors.joining(","));
    }

    // Store the selected project keys in PluginSettings
    PluginSettings pluginSettings = pluginSettingsFactory.createGlobalSettings();
    pluginSettings.put(PLUGIN_STORAGE_KEY + ".selectedProjects", projectKeys);

    resp.setContentType("text/plain");
    resp.getWriter().write("Projects applied successfully!");
}








#if ($allowedProjectKeys.contains($project.key) && $issue.getIssueTypeObject().getName() == "Story")
    <a id="show-popup" class="aui-button ">Analyze Description</a>
#end







Sure! Let's refactor the code to use a `for` loop instead of a stream filter. Hereâ€™s how you can do it:

```java
ProjectManager projectManager = ComponentAccessor.getProjectManager();
WorkflowSchemeManager workflowSchemeManager = ComponentAccessor.getWorkflowSchemeManager();
String targetSchemeName = "NEW: Project Management Workflow Scheme";

// Fetch all projects
List<Project> projects = projectManager.getProjectObjects();
List<Project> projectsWithTargetWorkflowScheme = new ArrayList<>();

// Filter projects associated with the target workflow scheme using a for loop
for (Project project : projects) {
    try {
        Scheme scheme = workflowSchemeManager.getWorkflowSchemeObj(project);
        if (scheme != null && scheme.getName().equals(targetSchemeName)) {
            projectsWithTargetWorkflowScheme.add(project);
        }
    } catch (Exception e) {
        // Handle the exception (optional)
    }
}

// Create a comma-separated list of project keys and names
String projectList = projectsWithTargetWorkflowScheme.stream()
    .map(project -> project.getKey() + "-" + project.getName())
    .collect(Collectors.joining(","));

// Output the project list
resp.setContentType("text/plain");
resp.getWriter().write(projectList);
```

### Explanation:
- A `for` loop iterates through each project in the list of projects.
- Inside the loop, it retrieves the workflow scheme associated with the project.
- If the scheme matches the target scheme name, the project is added to the list of projects with the target workflow scheme.
- The final list of projects is converted into a comma-separated string of project keys and names.
- The result is sent as the HTTP response.

This approach should align with your requirement to use a `for` loop instead of a stream filter. Let me know if you need further adjustments or have any other questions!